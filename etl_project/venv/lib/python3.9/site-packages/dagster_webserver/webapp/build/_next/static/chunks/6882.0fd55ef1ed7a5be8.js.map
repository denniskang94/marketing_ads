{"version":3,"file":"static/chunks/6882.0fd55ef1ed7a5be8.js","mappings":"8LA0BO,IAAMA,EAAwB,cACnC,eAACC,CAAa,kBAAEC,CAAgB,CAAQ,wDAAG,CACzCD,cAAeE,OACfD,sBAAkBC,CACpB,EAEM,UAACC,CAAQ,cAAEC,CAAY,YAAEC,CAAU,WAAEC,CAAS,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,EAAAA,EAAgBA,EAE7EC,EAAmBC,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACxBP,EAASQ,GAAG,CAAC,GAClBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACC,EAAKC,UAAU,CAACC,IAAI,CAAEF,EAAKG,kBAAkB,CAACD,IAAI,GAEpE,CAACZ,EAAS,EAEPc,EAAuBP,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC5BN,EAAac,MAAM,GAAKf,EAASe,MAAM,CAC1C,EAAE,CACFd,EAAaO,GAAG,CAAC,GACfC,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACC,EAAKC,UAAU,CAACC,IAAI,CAAEF,EAAKG,kBAAkB,CAACD,IAAI,GAExE,CAACZ,EAAUC,EAAa,EAErBe,EAAkBC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CACjC,IACE,GAAmB,IAAfC,EAAMC,IAAI,CAAQ,YACpBjB,EAAWI,GAKbH,EADeG,EAAiBc,MAAM,CAAC,GAAiB,CAACF,EAAMG,GAAG,CAACC,KAEnEpB,EAAWqB,MAAMC,IAAI,CAACN,GACxB,EACA,CAACZ,EAAkBH,EAAWD,EAAW,EAG3C,MAAOuB,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAAc,CACrCP,MAAOrB,GAAgCiB,EACvCY,UAAWnB,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAChB,IACED,EAAiBE,GAAG,CAAC,IACZ,CAACmB,MAAOL,EAAaM,MAAO,CAACC,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,CAACP,GAAa,IAE9E,CAAChB,EAAiB,EAEpBwB,eAAgB,IACVhC,EACFA,EAAiByB,MAAMC,IAAI,CAACN,GADR,CAGpBF,EAAgBE,EAEpB,EACAa,UAAW,QACX,GAAGC,CAAU,EAEjB,EAAE,EAEqB,GAAwBH,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,CAACF,GAE3DK,EAA4C,CACvDpB,KAAM,gBACNqB,KAAM,SACNC,YAAa,OAAC,OAACP,CAAK,CAAuB,SACzC,UAACQ,EAAAA,EAAgCA,CAAAA,CAACC,KAAMP,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,CAACF,qBAEnEU,EACAC,OAAQD,CACV,EAAE,0SC3EF,IAAME,EAA4B,CAChCC,KAAM,UACNC,WAAY,CAACC,UAAW,EAAGC,OAAQ,CAAC,CAAC,CACvC,EAEMC,EAAU,CAACC,EAAwBC,KACvC,OAAQA,EAAOC,IAAI,EACjB,IAAK,QACH,OAAOR,CACT,KAAK,QACH,MAAO,CAAC,GAAGM,CAAS,CAAEL,KAAM,UAAU,CACxC,KAAK,iBAAkB,CACrB,GAAM,YAACC,CAAU,CAAC,CAAGI,EACrB,MAAO,CACLL,KAAM,WACNC,WAAY,CAAC,GAAGA,CAAU,CAAEC,UAAWD,EAAWC,SAAS,CAAG,CAAC,CACjE,CACF,CACA,IAAK,eAAgB,CACnB,GAAM,CAACD,YAAU,CAAC,CAAGI,EACrB,MAAO,CACLL,KAAM,WACNC,WAAY,CACV,GAAGA,CAAU,CACbC,UAAWD,EAAWC,SAAS,CAAG,EAClCC,OAAQ,CAAC,GAAGF,EAAWE,MAAM,CAAE,CAACG,EAAOlC,IAAI,CAAC,CAAEkC,EAAOE,KAAK,CAC5D,CACF,CACF,CACA,IAAK,WACH,MAAO,CAAC,GAAGH,CAAS,CAAEL,KAAM,WAAW,CAC3C,CACF,EAEaS,EAA6B,IAAMC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACN,EAASL,cAAc,0BCF3E,IAAMY,EAA8B,IACzC,GAAM,gBAACC,CAAc,SAAEC,CAAO,CAAEC,aAAW,CAAC,CAAGC,EACzCC,EAAQF,EAAYvC,MAAM,CAE1B,CAACG,EAAOuC,EAAS,CAAGR,IAG1BS,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACe,CAJ2BT,WAIf,CAA/BG,GACFK,EAAS,CAACV,KAAM,OAAO,EAE3B,EAAG,CAACK,EAAgBK,EAAS,EAE7B,GAAM,CAACE,EAAY,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAC/BC,EAAAA,EAAqBA,EAGjB,CAACC,EAAW,CAAGF,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAC9BG,EAAAA,EAAoBA,EAGhB,CAACC,EAAc,CAAGJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGjCK,EAAAA,EAAuBA,EAEnB,CAACC,EAAa,CAAGN,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAChCO,EAAAA,EAAsBA,EAGlBC,EAAQ,MAAOC,IACnB,GAAM,aAAC/C,CAAW,MAAEV,CAAI,MAAEmC,CAAI,CAAC,CAAGsB,EAC5BC,EAAa,CACjBC,uBAAwBjD,EAAYkD,QAAQ,CAC5CC,eAAgBnD,EAAYV,IAAI,EAGlC,OAAQmC,GACN,IAAK,SAAU,CACb,GAAM,MAAC2B,CAAI,CAAC,CAAG,MAAMf,EAAY,CAC/BgB,UAAW,CAACC,eAAgB,CAAC,GAAGN,CAAU,CAAEO,WAAYjE,CAAI,CAAC,CAC/D,GAEA,aAAQ8D,EAAAA,KAAAA,EAAAA,EAAMf,MAANe,KAAiB,CAACI,UAAU,EAClC,IAAK,SACHrB,EAAS,CAACV,KAAM,gBAAgB,GAChC,MACF,KAAK,sBACL,IAAK,oBACL,IAAK,cACHU,EAAS,CACPV,KAAM,oBACNnC,EACAoC,MAAO0B,EAAKf,WAAW,CAACoB,OAAO,EAErC,CAEA,KACF,CAEA,IAAK,WAAY,CACf,GAAM,MAACL,CAAI,CAAC,CAAG,MAAMV,EAAc,CACjCW,UAAW,CAACK,iBAAkB,CAAC,GAAGV,CAAU,CAAEW,aAAcrE,CAAI,CAAC,CACnE,GAEA,aAAQ8D,EAAAA,KAAAA,EAAAA,EAAMV,MAANU,OAAmB,CAACI,UAAU,EACpC,IAAK,sBACHrB,EAAS,CAACV,KAAM,gBAAgB,GAChC,MACF,KAAK,oBACL,IAAK,cACHU,EAAS,CACPV,KAAM,oBACNnC,EACAoC,MAAO0B,EAAKV,aAAa,CAACe,OAC5B,EACJ,CAEA,KACF,CAEA,QACEG,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACnC,EACtB,CACF,EAEMoC,EAAO,MAAOd,IAClB,GAAM,MAACzD,CAAI,MAAEmC,CAAI,kBAAEqC,CAAgB,CAAC,CAAGf,EACjCM,EAAY,CAACU,GAAID,EAAiBC,EAAE,EAE1C,OAAQtC,GACN,IAAK,SAAU,CACb,GAAM,MAAC2B,CAAI,CAAC,CAAG,MAAMZ,EAAW,WAACa,CAAS,GAC1C,aAAQD,EAAAA,KAAAA,EAAAA,EAAMZ,MAANY,IAAgB,CAACI,UAAU,EACjC,IAAK,2BACHrB,EAAS,CAACV,KAAM,gBAAgB,GAChC,MACF,KAAK,oBACL,IAAK,cACHU,EAAS,CACPV,KAAM,eACNnC,OACAoC,MAAO0B,EAAKZ,UAAU,CAACiB,OAAO,EAEpC,CACA,KACF,CAEA,IAAK,WAAY,CACf,GAAM,MAACL,CAAI,CAAC,CAAG,MAAMR,EAAa,WAACS,CAAS,GAC5C,aAAQD,EAAAA,KAAAA,EAAAA,EAAMY,MAANZ,aAAyB,CAACI,UAAU,EAC1C,IAAK,sBACHrB,EAAS,CAACV,KAAM,gBAAgB,GAChC,MACF,KAAK,oBACL,IAAK,cACHU,EAAS,CACPV,KAAM,oBACNnC,EACAoC,MAAO0B,EAAKY,mBAAmB,CAACP,OAAO,EAE7C,CACA,KACF,CAEA,QACEG,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACnC,EACtB,CACF,EAEMwC,EAAS,UACb,GAAuB,YAAY,CAA/BnC,GAKJ,IAAK,IAAMiB,KADXZ,EAAS,CAACV,KAAM,OAAO,GACEO,GACA,SADa,CAChCF,EACF,MAAMgB,EAAMC,GAEZ,MAAMc,EAAKd,GAIfZ,EAAS,CAACV,KAAM,UAAU,GAC5B,EAgJMyC,EAAiC,aAAftE,EAAMsB,IAAI,CAElC,MACE,WAACiD,EAAAA,EAAMA,CAAAA,CACLC,OAA2B,aAAnBtC,EACRuC,MAA0B,UAAnBvC,EAA6B,oBAAsB,mBAC1DwC,kBAAmBJ,EACnBK,qBAAsBL,EACtBnC,QAASA,YAET,UAACyC,EAAAA,EAAUA,CAAAA,UACT,WAACC,EAAAA,CAAKA,CAAAA,CAACC,UAAU,SAASC,QAAS,aAChCC,CA1Je,KACtB,GAAuB,YAAY,CAA/B9C,EACF,OAAO,KAGT,OAAQlC,EAAMsB,IAAI,EAChB,IAAK,UACH,GAAuB,QAAQ,CAA3BY,EACF,MACE,UAAC+C,MAAAA,UACE,GAEA,OADW,IAAV3C,EAAc,eAAiB,GAAS,OAANA,EAAM,gBACzC,gDAIP,MACE,UAAC2C,MAAAA,UACE,GAEA,OADW,IAAV3C,EAAc,eAAiB,GAAS,OAANA,EAAM,gBACzC,+CAGP,KAAK,WACL,IAAK,YACH,IAAM7B,EAAQ6B,EAAQ,EAAItC,EAAMuB,UAAU,CAACC,SAAS,CAAGc,EAAQ,EAC/D,MACE,WAACuC,EAAAA,CAAKA,CAAAA,CAACC,UAAU,SAASC,QAAS,YACjC,UAACG,EAAAA,CAAWA,CAAAA,CAACC,OAAO,UAAU1E,MAAO2E,KAAKC,GAAG,CAAC,GAAK5E,GAAQ6E,QAAS7E,EAAQ,IAC5D,aAAfT,EAAMsB,IAAI,CACT,UAACiE,EAAAA,CAAeA,CAAAA,CAAC1B,QAAQ,oEACvB,OAGV,SACE,OAAO,IACX,EACF,IAsHS2B,CA5EiB,KACxB,GAAuB,aAAnBtD,GAAgD,WAAW,CAA1BlC,EAAMsB,IAAI,CAC7C,OAAO,KAGT,GAAItB,YAA2B,GAArBsB,IAAI,CACZ,MACE,UAAC2D,MAAAA,UAAI,yFAMT,IAAMxD,EAASzB,EAAMuB,UAAU,CAACE,MAAM,CAChCgE,EAAaC,OAAOC,IAAI,CAAClE,GAAQ5B,MAAM,CACvC+F,EAAe5F,EAAMuB,UAAU,CAACC,SAAS,CAAGiE,EAElD,MACE,WAACZ,EAAAA,CAAKA,CAAAA,CAACC,UAAU,SAASC,QAAS,YAChCa,EACC,WAACf,EAAAA,CAAKA,CAAAA,CAACC,UAAU,MAAMC,QAAS,EAAGc,WAAW,uBAC5C,UAACC,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,eAAeqG,MAAOC,EAAAA,EAAkB,KACnD,UAACf,MAAAA,UACqB,UAAnB/C,EACG,wBAEC,OADkB,IAAjB0D,EAAqB,eAAiB,GAAgB,OAAbA,EAAa,gBACvD,KACD,wBAEC,OADkB,IAAjBA,EAAqB,eAAiB,GAAgB,OAAbA,EAAa,gBACvD,UAGP,KACHH,EACC,WAACZ,EAAAA,CAAKA,CAAAA,CAACC,UAAU,SAASC,QAAS,YACjC,WAACF,EAAAA,CAAKA,CAAAA,CAACC,UAAU,MAAMC,QAAS,EAAGc,WAAW,uBAC5C,UAACC,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,UAAUqG,MAAOC,EAAAA,EAAmB,KAC/C,UAACf,MAAAA,UACqB,UAAnB/C,EACG,mBAEC,OADgB,IAAfuD,EAAmB,eAAiB,GAAc,OAAXA,EAAW,gBACnD,KACD,kBAEC,OADgB,IAAfA,EAAmB,eAAiB,GAAc,OAAXA,EAAW,gBACnD,UAGT,UAACQ,KAAAA,CAAGC,MAAO,CAACC,OAAQ,OAAO,WACxBT,OAAOC,IAAI,CAAClE,GAAQnC,GAAG,CAAC,GACvB,UAAC8G,KAAAA,UACC,WAACvB,EAAAA,CAAKA,CAAAA,CAACC,UAAU,MAAMC,QAAS,YAC9B,WAACsB,SAAAA,WAAQC,EAAe,OACvB7E,CAAM,CAAC6E,EAAe,CAAG,UAACrB,MAAAA,UAAKxD,CAAM,CAAC6E,EAAe,GAAU,SAH3DA,SASb,QAGV,SAkBI,UAACC,EAAAA,EAAYA,CAAAA,UAAEC,CAvHH,KACd,GAAuB,YAAY,CAA/BtE,EACF,OAAO,KAGT,OAAQlC,EAAMsB,IAAI,EAChB,IAAK,UAKH,MACE,iCACE,UAACmF,EAAAA,EAAMA,CAAAA,CAACC,QAASvE,WAAS,WAC1B,UAACsE,EAAAA,EAAMA,CAAAA,CAACtB,OAAO,UAAUuB,QAASrC,WANjB,CAOdsC,SAPLzE,EACI,SAA+D,OAA5C,IAAVI,EAAc,eAAiB,GAAS,OAANA,EAAM,iBACjD,QAA8D,OAA5C,IAAVA,EAAc,eAAiB,GAAS,OAANA,EAAM,qBAUxD,KAAK,WAKH,MACE,UAACmE,EAAAA,EAAMA,CAAAA,CAACtB,OAAO,UAAUyB,QAAQ,aAJd,CAKhBD,SALHzE,EACI,YAAkE,OAA5C,IAAVI,EAAc,eAAiB,GAAS,OAANA,EAAM,iBACpD,YAAkE,OAA5C,IAAVA,EAAc,eAAiB,GAAS,OAANA,EAAM,kBAO5D,KAAK,YACH,MACE,UAACmE,EAAAA,EAAMA,CAAAA,CAACtB,OAAO,UAAUuB,QAASvE,WAAS,QAIjD,EACF,QAoFF,EAAE,eCnWK,IAAM0E,EAA0B,IACrC,IAAIC,EAAS,GACTC,GAAQ,EAEZ,IAAK,IAAM/G,KAASgH,EAAmB,CACrC,GAAM,QAACC,CAAM,CAAC,CAAGjH,EAMjB,GALIiH,IAAWC,EAAAA,GAAiBA,CAACC,OAAO,CACtCJ,CADwC,CAChC,GACCE,IAAWC,EAAAA,GAAiBA,CAACE,OAAO,EAAE,CAC/CN,GAAS,GAEPC,GAASD,EACX,KAEJ,CAHuB,MAKhB,QAACA,QAAQC,CAAK,CACvB,EAAE,ECTsC,IACtC,GAAM,aAAC3E,CAAW,CAAC,CAAGC,EAChBC,EAAQF,EAAYvC,MAAM,CAE1B,CAACqC,EAAgBmF,EAAkB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAiB,YAE/D,QAACR,CAAM,OAAEC,CAAK,CAAC,CAAG1H,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACvBwH,EAAwBzE,EAAY9C,GAAG,CAAC,OAAC,QAAlBuH,UAAmB3C,CAAgB,CAAC,UAAKA,KACtE,CAAC9B,EAAY,EAEhB,MACE,iCACE,UAACmF,EAAAA,EAAOA,CAAAA,CACNC,QACE,WAACC,EAAAA,EAAIA,CAAAA,WACH,UAACC,EAAAA,EAAQA,CAAAA,CACPxG,KAAM,SAA+D,OAA5C,IAAVoB,EAAc,eAAiB,GAAS,OAANA,EAAM,iBACvDsE,SAAU,CAACE,EACXa,gBAAe,CAACb,EAChB/F,KAAK,YACL2F,QAAS,KACPW,EAAkB,QACpB,IAEF,UAACK,EAAAA,EAAQA,CAAAA,CACPxG,KAAM,QAA8D,OAA5C,IAAVoB,EAAc,eAAiB,GAAS,OAANA,EAAM,iBACtDsE,SAAU,CAACG,EACXY,gBAAe,CAACZ,EAChBhG,KAAK,aACL2F,QAAS,KACPW,EAAkB,OACpB,OAINO,UAAU,sBAEV,UAACnB,EAAAA,EAAMA,CAAAA,CAACG,SAAU,CAACtE,EAAO6C,OAAO,UAAU0C,UAAW,UAAC/B,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,yBAAkB,cAIrF,UAACuC,EAA2BA,CAC1BC,eAAgBA,EAChBE,OAF0BH,KAEbG,EACbD,QAAS,IAAMkF,EAAkB,gBAIzC,EAAE,mNChCK,IAAMS,EAAwB,OAAC,CAACC,MAAI,CAAQ,GAC3C,CAACC,EAAYC,EAAc,CAAGX,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAgE7C,MACE,iCACE,UAACC,EAAAA,EAAOA,CAAAA,CAACC,QAhEG,MACd,GAAI,CAACO,EACH,IADS,EAEP,UAACG,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACC,SAAU,EAAGC,WAAY,EAAE,WACxC,UAACC,EAAAA,EAAOA,CAAAA,UAAC,mBAKf,IAAMvH,EAAOwH,CAAY,CAACR,EAAKd,MAAM,CAAC,CAChCuB,EAAY,UAACC,EAAAA,CAASA,CAAAA,CAACD,UAAW,CAACE,KAAMX,EAAKS,SAAS,IAE7D,OAAQT,EAAKd,MAAM,EACjB,KAAK0B,EAAAA,GAAqBA,CAACC,OAAO,CAChC,MACE,UAACC,EAAAA,CACC9H,KAAMA,EACN0D,MAAM,qBACN+D,UAAWA,EACXhB,QACE,UAACvC,MAAAA,UACE8C,EAAKjG,KAAK,CACT,UAACgH,EAAAA,CAAUA,CAAAA,CAACpC,QAAS,IAAMuB,GAAc,YAAO,eAEhD,mBAMZ,MAAKU,EAAAA,GAAqBA,CAACI,OAAO,CAAE,CAClC,IAAMC,EAAWjB,EAAKkB,MAAM,CAACpJ,MAAM,CACnC,MACE,UAACgJ,EAAAA,CACC9H,KAAMA,EACN0D,MAAM,wBACN+D,UAAWA,EACXhB,QACE,UAACvC,MAAAA,UACe,IAAb+D,EACG,kBACA,GAAoC,OAAjCE,EAAAA,EAAeA,CAACC,MAAM,CAACH,GAAU,sBAKlD,CACA,KAAKL,EAAAA,GAAqBA,CAACS,OAAO,CAChC,MAAO,UAACP,EAAAA,CAAa9H,KAAMA,EAAM0D,MAAM,kBAAkB+D,UAAWA,GACtE,MAAKG,EAAAA,GAAqBA,CAACU,OAAO,CAClC,YAMyBtB,EALvB,MACE,UAACc,EAAAA,CACC9H,KAAMA,EACN0D,MAAM,sBACN+D,UAAWA,EACXhB,QAAS,UAACc,EAAAA,EAAOA,CAAAA,UAAEP,OAAAA,EAAAA,EAAKuB,UAAAA,EAALvB,EAAmB,UAAnBA,cAG3B,EACF,IAIiCH,UAAU,MAAM2B,gBAAgB,iBAC3D,UAACC,EAAAA,CAAWA,CAAAA,UACTzB,EAAOQ,CAAY,CAACR,EAAKd,MAAM,CAAC,CAAG,UAACnB,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,UAAUqG,MAAOC,EAAAA,EAAiB,SAGpF+B,SAAAA,KAAAA,EAAAA,CAAAA,CAAMjG,KAAK,EACV,WAACyC,EAAAA,EAAMA,CAAAA,CAACC,OAAQwD,EAAYvD,MAAM,QAAQyB,MAAO,CAACuD,MAAO,MAAM,YAC7D,UAAC7E,EAAAA,EAAUA,CAAAA,UACT,UAAC8E,EAAAA,EAAeA,CAAAA,CAAC5H,MAAOiG,EAAKjG,KAAK,KAEpC,UAACyE,EAAAA,EAAYA,CAAAA,CAACoD,SAAS,aACrB,UAAClD,EAAAA,EAAMA,CAAAA,CACLtB,OAAO,UACPuB,QAAS,KACPuB,GAAc,EAChB,WACD,cAKH,OAGV,EAAE,EAE6D,CAC7D,CAACU,EAAAA,GAAqBA,CAACC,OAAO,CAAC,CAAE,UAAC9C,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,UAAUqG,MAAOC,EAAAA,EAAmB,KAChF,CAAC2C,EAAAA,GAAqBA,CAACI,OAAO,CAAC,CAAE,UAACjD,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,OAAOqG,MAAOC,EAAAA,EAAkB,KAC5E,CAAC2C,EAAAA,GAAqBA,CAACS,OAAO,CAAC,CAAE,UAACQ,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAClD,CAAClB,EAAAA,GAAqBA,CAACU,OAAO,CAAC,CAAE,UAACvD,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,SAASqG,MAAOC,EAAAA,EAAiB,IAC/E,EASM6C,EAAe,OAAC,MAAC9H,CAAI,CAAE0D,OAAK,WAAE+D,CAAS,SAAEhB,CAAO,CAAoB,GACxE,MACE,WAACU,EAAAA,CAAGA,CAAAA,CAACC,QAAS,GAAI2B,UAAWC,IAAAA,YAAmB,WAC9C,WAAC7B,EAAAA,CAAGA,CAAAA,CACF8B,OAAQxC,EAAU,cAAW3I,EAC7BsJ,QAASX,EAAU,CAACyC,OAAQ,EAAE,OAAIpL,EAClCsH,OAAQqB,EAAU,CAACyC,OAAQ,CAAC,EAAIpL,OAChCqL,KAAM,CACJpF,UAAW,MACXe,WAAY,SACZsE,IAAK,EACLC,eAAgB,eAClB,YAEA,WAAClC,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOe,WAAY,SAAUsE,IAAK,CAAC,YACvDpJ,EACD,UAACkE,MAAAA,UAAKR,OAER,UAACQ,MAAAA,UAAKuD,OAEPhB,EAAU,UAACvC,MAAAA,UAAKuC,IAAiB,OAGxC,sDC7JO,IAAM6C,GAAoB,QAKhBC,EAAf,IAAMC,EAAAA,OAASD,EAJWE,KAAKC,cAAc,CAACC,UAAUC,QAAQ,CAAE,UAChEC,EACAC,aAAc,aAChB,GAEGC,aAAa,CAAC,IAAIC,MAClBC,IAAI,CAAC,GAAwB,iBAAdC,EAAKpJ,IAAI,CAAK,EAFjByI,KAAAA,EAAAA,EAEkC7J,IAFlC6J,CAEuC,CAEhDY,EAAaX,QAAAA,KAAAA,EAAAA,EAAQY,EAARZ,KAAe,CAAC,MAAO,IAC1C,GAAI,CAACW,EACH,OAAO,EAGT,CAJiB,EAIX,CAACE,EAAQ,GAAG,CAAEC,EAAU,GAAG,CAAC,CAAGH,EAAWI,KAAK,CAAC,KAChDC,EAAcC,SAASJ,EAAO,IAC9BK,EAAgB,SAAUJ,EAAS,IAAM,IAAOE,CAAAA,CAAc,EAAI,CAAC,GAAI,EAC7E,OAAOA,EAAcE,CACvB,EAAE,wCCJK,IAAMC,GAAU,IACrB,GAAM,KADYA,SACXC,CAAY,mBAAEC,CAAiB,CAAC,CAAGvJ,EACpC,mBAACwJ,CAAiB,uBAAEC,CAAqB,CAAC,CAAGC,GACjDJ,EACAC,GAGII,EACJ,UAACC,EAAAA,EAAaA,CAAAA,CACZC,KAAM,CACJ,CAACC,IAAK,aAAc1L,MAAO,UAAC2L,EAAAA,EAAWA,CAAAA,UAAET,GAA2B,EACpE,CAACQ,IAAK,YAAa1L,MAAO,UAAC4L,OAAAA,UAAMR,GAAyB,EAC3D,GAIL,MACE,UAACS,GAAAA,UACC,UAACC,EAAAA,CAAOA,CAAAA,CAAC/E,QAASwE,EAAgBpE,UAAU,eAC1C,UAAC4E,EAAAA,CAAGA,CAAAA,CAACzL,KAAK,oBAAY+K,OAI9B,EAAE,GAEgC,CAChCH,EACAC,KAEA,GAAM,CACJa,SAAU,CAACC,EAAe,CAC3B,CAAGxN,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACyN,GAAAA,EAAWA,EAE1B,GAAI,CAAChB,EACH,MAAO,CACLE,KAFe,aAEI,KACnBC,sBAAuB,IACzB,EAGF,IAAMc,EAAmBhB,GAAqB,MACxCiB,EAAmCC,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,CAACnB,EAAc,kBAACiB,CAAgB,GAClFG,EAAkC,cAAnBL,EAAiCM,CAAAA,EAAAA,GAAAA,EAAAA,CAAeA,GAAKN,EAEpEO,EAAqB5C,GAAkB0C,GACvCG,EAA0B7C,GAAkBuC,GAQlD,GAT4CvC,GASrC,CACLwB,IAT+CxB,cAGbyC,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,CAACnB,EAAc,CAChEiB,iBAAkBG,EAClBI,SAJeF,EAAqBC,CAKtC,GAIEpB,sBAAuBe,CACzB,CACF,EAAE,GAEgBO,GAAAA,EAAMA,CAACnI,GAAG,2PCrErB,IAAMoI,GAAe,CAACpG,EAA2BqG,KACtD,GAAIrG,IAAWC,EAAAA,GAAiBA,CAACE,GADViG,IACiB,EAA6B,GAAG,CAA5BC,GAEjCrG,IAAWC,EAAAA,GAAiBA,CAACC,OAAO,EAAImG,GAA4B,GAD7E,OAAO,KAKT,IAAM7L,EAAS,EAAE,CAajB,OAZIwF,IAAWC,EAAAA,GAAiBA,CAACC,OAAO,EAA6B,GAAG,CAA5BmG,EAC1C7L,EAAO8L,IAAI,CACT,0HAEOtG,IAAWC,EAAAA,GAAiBA,CAACE,OAAO,EAAIkG,EAAuB,GAAG,EACpEC,IAAI,CAAC,kFAGVD,EAAuB,GAAG,EACrBC,IAAI,CAAC,0CAIZ,UAAChG,EAAAA,EAAOA,CAAAA,CACNgC,gBAAgB,QAChBiE,iBAAiB,6BACjBC,SAAS,QACTjG,QACE,WAACU,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,SAAUqF,IAAK,CAAC,EAAGhC,QAAS,aACjD,UAAC9B,SAAAA,UAAO,yCACR,UAACpB,MAAAA,UAAI,YACL,UAACgB,KAAAA,UACExE,EAAOnC,GAAG,CAAC,CAACwC,EAAO4L,IAClB,UAACtH,KAAAA,UAAgBtE,GAAR4L,kBAMjB,UAAClB,EAAAA,CAAGA,CAAAA,CAACmB,IAAI,IAACC,WAAW,IAACzI,OAAO,kBAAS,WAK5C,EAAE,20BCCF,IAAM0I,GAAmB,sCACnBC,GAAiC,QAAyB,OAAjBD,IAmQ/BT,CAAAA,EAAAA,GAAAA,EAAAA,CAAMA,CAAClF,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,uFAEC,OAAC,qBAAC6F,CAAmB,CAAC,UAC7CA,EAAsBD,GAAiCD,KAIpD,IAAMG,GAAwBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,KAkCpCC,GAAAA,EAAiBA,CACjBC,GAAAA,EAAiBA,CACjBC,GAAAA,CAAwBA,EAC1B,GC/S0CC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CACpD,CAAChM,EAAyBiM,SAmDtBC,EACAA,EA4F2CA,EA/I7C,GAAM,OAACb,CAAK,MAAEhO,CAAI,aAAEU,CAAW,SAAEoO,CAAO,iBAAEC,CAAe,CAAC,CAAGpM,EAGvDqM,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAC,KAE9BC,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAC1Bb,GACA,CACEvK,UAAW,CACTqL,MAHiBd,GAGP,CACRzK,eAAgBnD,EAAYV,IAAI,CAChC2D,uBAAwBjD,EAAYkD,QAAQ,CAC5CS,aAAcrE,CAChB,CACF,EACAqP,KAAM,CAACL,EACPM,6BAA6B,CAC/B,GAGIC,EAAoCJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAGhDK,GAAAA,CAA+BA,CAAE,CACjCzL,UAAW,CACTK,iBAAkB,CAChBP,eAAgBnD,EAAYV,IAAI,CAChC2D,uBAAwBjD,EAAYkD,QAAQ,CAC5CS,aAAcrE,CAChB,CACF,EACAqP,KAAM,CAACL,CACT,GAEAS,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACP,EAAaQ,GAAAA,EAAeA,EACtDD,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACF,EAAmCG,GAAAA,EAAeA,EAE5E,GAAM,MAAC5L,CAAI,CAAC,CAAGoL,EAETL,EAAelP,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACvBmE,OAAAA,EAAAA,KAAAA,EAAAA,EAAM6L,MAAN7L,SAAqB,CAACI,UAAAA,IAAe,WAChC,CAD4C,IAI9CJ,EAAK6L,eAAe,CAC1B,CAAC7L,EAAK,EAEHuE,QAAOwG,EAAAA,KAAAA,EAAAA,EAAce,aAAa,CAA3Bf,KAAiC,CAAC,EAAE,CAE3C,mBAAC1C,CAAiB,CAAEC,uBAAqB,CAAC,CAAGC,GACjDwC,OAAAA,QADmExC,EACnEwC,KAAAA,EAAAA,EAAc5C,YAAAA,EAAd4C,EAA8B,KAC9BA,KADAA,EACAA,QAAAA,EAAAA,KAAAA,EAAAA,EAAc3C,cAAd2C,GAAc3C,EAAd2C,EAAmC,MAyDrC,IAzDEA,EA0DA,UAACgB,EAAAA,CAAQA,CAAAA,CACPjB,IAAKA,EACLZ,MAAOA,EACP8B,KAAMC,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACrP,EAAa,cAAmB,OAALV,IAC1D8O,QAASA,EACTkB,SAAUjB,EACVkB,WAAY,OAAC,MAACH,CAAI,CAAE,GAAGnN,EAAM,SAAK,UAACuN,EAAAA,EAAIA,CAAAA,CAACC,GAAIL,GAAQ,IAAM,GAAGnN,CAAK,IAClEyN,KACE,WAAC5H,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,EAAGtE,WAAY,YAAY,YAC5D,UAACZ,MAAAA,UACC,UAACa,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,eAEb,WAACwI,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,SAAUqF,IAAK,CAAC,YACrC,WAACjC,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,GAAItE,WAAY,QAAQ,YACzD,UAACqC,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,EAAGtE,WAAY,QAAQ,WAAInG,IAC7D6O,OAAAA,EAAAA,KAAAA,EAAAA,EAAcwB,WAAAA,EACb,CADDxB,EACC,OAAChC,EAAAA,CAAOA,CAAAA,CACN/E,QAAS,UAACvC,MAAAA,CAAIiB,MAAO,CAACuD,MAAO,GAAG,WAAI8E,EAAawB,WAAW,GAC5DnI,UAAU,eAEV,UAAC9B,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,OAAOqG,MAAOC,EAAAA,EAAgB,OAEzC,QAEL6F,EACC,WAACvD,EAAAA,EAAOA,CAAAA,WAAC,YACG,IACV,UAACiE,EAAAA,CAAOA,CAAAA,CACN3E,UAAU,MACVJ,QACE,UAACyE,EAAAA,EAAaA,CAAAA,CACZC,KAAM,CACJ,CACEC,IAAK,aACL1L,MAAO,UAAC2L,EAAAA,EAAWA,CAAAA,UAAEmC,OAAAA,QAAAA,EAAAA,KAAAA,EAAAA,EAAc5C,YAAAA,EAAd4C,EAA8B,IACrD,EACA,CAACpC,GAFsBoC,CAEjB,YAAa9N,MAAO,UAAC4L,OAAAA,UAAMR,GAAyB,EAC3D,YAIL,UAACQ,OAAAA,UAAMP,SAIX,UAACkE,EAAAA,CAAQA,CAAAA,CAACC,OAAQ,GAAIC,QAAS,WAKvCC,MAAOA,CAzGG,SAYKC,EAXjB,GAAIxB,EAAYyB,OAAO,EAAI,CAACzB,EAAYpL,IAAI,CAC1C,CAD4C,KACrC,UAACwM,EAAAA,CAAQA,CAAAA,CAACC,OAAQ,IAAKC,QAAS,KAGzC,IAAME,EAAa7B,OAAAA,EAAAA,KAAAA,EAAAA,EAAce,aAAa,CAACgB,IAAAA,GAAQ,EAAE,CAEzD,MACE,UAACC,EAAAA,CAAkBA,CAAAA,CACjBC,SAAU,CACR,CACErE,IAAK,aACLsE,QAASL,CAAAA,OAAAA,EAAAA,CAAU,CAAC,IAAXA,KAAAA,EAAAA,EAAeM,GAAfN,MAAeM,EACtB,UAACnJ,EAAAA,EAAOA,CAAAA,CAENkG,SAAS,MACTlE,gBAAgB,QAChB/B,QACE,UAACvC,MAAAA,UACC,UAAC0L,GAAAA,EAAgBA,CAAAA,CAACC,IAAKR,CAAU,CAAC,EAAE,CAAE1Q,KAAMA,MAGhDmR,eAAgB,aAEhB,UAACrH,EAAAA,CAAWA,CAAAA,UACV,WAACtB,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOe,WAAY,SAAUsE,IAAK,CAAC,YACxD,UAAC2G,GAAAA,EAAkBA,CAAAA,CAAC7J,OAAQmJ,CAAU,CAAC,EAAE,CAACnJ,MAAM,GAChD,UAAC8J,GAAAA,CAAWA,CAAAA,CAACC,cAAeZ,CAAU,CAAC,EAAE,CAACM,SAAS,CAAEO,aAAa,UAbjEb,CAAU,CAAC,EAAE,CAACjM,EAAE,EAiBrB,IACN,EACA,CACEgI,IAAK,OACLsE,QAAS,UAAC3I,EAAqBA,CAACC,WAAMA,EAAAA,EAAQ,GAAfD,GACjC,EACA,CACEqE,IAHsCpE,SAItC0I,QACE,UAACvI,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,SAAUsF,eAAgB,QAAQ,EAAGjC,QAAS,CAAC2H,KAAM,CAAC,WAC1EvB,EACC,UAAC2C,GAAAA,CAAcA,CAAAA,CAAY9Q,YAAaA,EAAa+Q,SAAU5C,GAA1C7O,GAErB,UAAC0R,EAAAA,CAAQA,CAAAA,CAAYxK,QAAQ,IAACyK,aAAa,IAAC7C,SAAS,EAAOrF,OAAO,UAApDzJ,IAIvB,EACD,GAGP,KAwDF,GACA,GAE2B4R,WAAW,CAAG,i8BCjL3C,IAAMzD,GAAmB,kCAAHA,OAChBC,GAAiC,QAAyB,OAAjBD,IAqO/BT,CAAAA,EAAAA,GAAAA,EAAAA,CAAMA,CAAClF,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,GArOU4F,IAA2BD,gFAuOpC,OAAC,qBAACE,CAAmB,CAAC,UAC7CA,EAAsBD,GAAiCD,KAIpD,IAAM0D,GAGT,CACF,CAACC,EAAAA,GAAUA,CAACC,KAAK,CAAC,CAAE,CAClB/R,KAAM,IATiEmO,WAAnBC,KAU9C,UACNiC,YAAa,4DACf,EACA,CAACyB,EAAAA,GAAUA,CAACE,gBAAgB,CAAC,CAAE,CAC7BhS,KAAM,8BACNqB,KAAM,uBACNgP,YACE,4FACJ,EACA,CAACyB,EAAAA,GAAUA,CAACG,UAAU,CAAC,CAAE,CACvBjS,KAAM,8BACNqB,KAAM,uBACNgP,YACE,4FACJ,EACA,CAACyB,EAAAA,GAAUA,CAACI,gBAAgB,CAAC,CAAE,CAC7BlS,KAAM,0BACNqB,KAAM,UACNgP,YACE,iHACJ,EACA,CAACyB,EAAAA,GAAUA,CAACK,WAAW,CAAC,CAAE,CACxBnS,KAAM,qBACNqB,KAAM,UACNgP,YACE,kGACJ,EACA,CAACyB,EAAAA,GAAUA,CAACM,UAAU,CAAC,CAAE,CACvBpS,KAAM,oBACNqB,KAAM,UACNgP,YAAa,wCACf,EACA,CAACyB,EAAAA,GAAUA,CAACO,QAAQ,CAAC,CAAE,CACrBrS,KAAM,kBACNqB,KAAM,UACNgP,YAAa,IACf,EACA,CAACyB,EAAAA,GAAUA,CAACQ,OAAO,CAAC,CAAE,CACpBtS,KAAM,kBACNqB,KAAM,UACNgP,YAAa,IACf,CACF,EAAE,GAEiC9B,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,KAuClCC,GAAAA,EAAiBA,CACjBC,GAAAA,EAAiBA,CACjB8D,GAAAA,CAAsBA,EACxB,GCjUwC5D,CAAAA,EAAAA,EAAAA,IDuRJJ,MCvRII,CAAUA,CAClD,CAAChM,EAAciM,KACb,GAAM,CAACZ,OAAK,MAAEhO,CAAI,aAAEU,CAAW,SAAEoO,CAAO,iBAAEC,CAAe,CAAC,CAAGpM,EAGvDqM,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAC,KAE9BuD,EAAoBrD,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAChCsD,GACA,CACE1O,UAAW,CACTqL,IAHeqD,KAGL,CACR5O,eAAgBnD,EAAYV,IAAI,CAChC2D,uBAAwBjD,EAAYkD,QAAQ,CAC5CK,WAAYjE,CACd,CACF,EACAqP,KAAM,CAACL,CACT,GAGI0D,EAAkCvD,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAG9CwD,GAAAA,CAA6BA,CAAE,CAC/B5O,UAAW,CACTC,eAAgB,CACdH,eAAgBnD,EAAYV,IAAI,CAChC2D,uBAAwBjD,EAAYkD,QAAQ,CAC5CK,WAAYjE,CACd,CACF,EACAqP,KAAM,CAACL,CACT,GAEAS,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAAC+C,EAAmB9C,GAAAA,EAAeA,EAC5DD,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACiD,EAAiChD,GAAAA,EAAeA,EAE1E,GAAM,CAAC5L,MAAI,CAAC,CAAG0O,EAETI,EAAajT,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACrBmE,OAAAA,EAAAA,KAAAA,EAAAA,EAAM+O,MAAN/O,OAAmB,CAACI,UAAAA,IAAe,SAC9B,CADwC,IAI1CJ,EAAK+O,aAAa,CACxB,CAAC/O,EAAK,EAEHuE,QAAOuK,EAAAA,KAAAA,EAAAA,EAAYE,WAAW,CAACC,KAAK,CAAC,EAAE,CAEvCC,QAAaJ,EAAAA,KAAAA,EAAAA,EAAYI,UAAU,CACnCC,CADaL,CACAI,EAAanB,EAAgB,CAACmB,EAAW,CAAG,KAwD/D,MACE,UAACnD,EAAAA,CAAQA,CAAAA,CACPjB,IAAKA,EACLZ,MAAOA,EACP8B,KAAMC,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACrP,EAAa,YAAiB,OAALV,IACxD8O,QAASA,EACTkB,SAAUjB,EACVkB,WAAY,OAAC,MAACH,CAAI,CAAE,GAAGnN,EAAM,SAAK,UAACuN,EAAAA,EAAIA,CAAAA,CAACC,GAAIL,GAAQ,IAAM,GAAGnN,CAAK,IAClEyN,KACE,WAAC5H,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,EAAGtE,WAAY,YAAY,YAC5D,UAACZ,MAAAA,UACC,UAACa,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,cAEb,WAACwI,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,SAAUqF,IAAK,CAAC,YACrC,WAACjC,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,GAAItE,WAAY,QAAQ,YACxDnG,EACAiT,OAAAA,EAAAA,KAAAA,EAAAA,EAAY5C,WAAAA,CAAZ4C,CACC,UAACpG,EAAAA,CAAOA,CAAAA,CACN/E,QAAS,UAACvC,MAAAA,CAAIiB,MAAO,CAACuD,MAAO,GAAG,WAAIkJ,EAAW5C,WAAW,GAC1DnI,UAAU,eAEV,UAAC9B,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,OAAOqG,MAAOC,EAAAA,EAAgB,OAEzC,QAEN,UAACsC,EAAAA,EAAOA,CAAAA,UACLgK,OAAAA,EAAAA,KAAAA,EAAAA,EAAYI,UAAAA,EAAZJ,EACkB,CAACA,EAAWI,UAAU,CAAC,CAExC,UAAC1C,EAAAA,CAAQA,CAAAA,CAACC,OAAQ,GAAIC,QAAS,aAMzCC,MAAOA,CAzFG,SAYKC,EAXjB,GAAI8B,EAAkB7B,OAAO,EAAI,CAAC6B,EAAkB1O,IAAI,CACtD,CADwD,KACjD,UAACwM,EAAAA,CAAQA,CAAAA,CAACC,OAAQ,IAAKC,QAAS,KAGzC,IAAME,EAAakC,SAAAA,KAAAA,EAAAA,EAAYE,KAAZF,MAAuB,CAAChC,IAAAA,GAAQ,EAAE,CAErD,MACE,UAACC,EAAAA,CAAkBA,CAAAA,CACjBC,SAAU,CACR,CACErE,IAAK,aACLsE,QAASL,CAAAA,OAAAA,EAAAA,CAAU,CAAC,IAAXA,KAAAA,EAAAA,EAAeM,GAAfN,MAAeM,EACtB,UAACnJ,EAAAA,EAAOA,CAAAA,CAENkG,SAAS,MACTlE,gBAAgB,QAChB/B,QACE,UAACvC,MAAAA,UACC,UAAC0L,GAAAA,EAAgBA,CAAAA,CAACC,IAAKR,CAAU,CAAC,EAAE,CAAE1Q,KAAMA,MAGhDmR,eAAgB,aAEhB,UAACrH,EAAAA,CAAWA,CAAAA,UACV,WAACtB,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOe,WAAY,SAAUsE,IAAK,CAAC,YACxD,UAAC2G,GAAAA,EAAkBA,CAAAA,CAAC7J,OAAQmJ,CAAU,CAAC,EAAE,CAACnJ,MAAM,GAChD,UAAC8J,GAAAA,CAAWA,CAAAA,CAACC,cAAeZ,CAAU,CAAC,EAAE,CAACM,SAAS,CAAEO,aAAa,UAbjEb,CAAU,CAAC,EAAE,CAACjM,EAAE,EAiBrB,IACN,EACA,CACEgI,IAAK,OACLsE,QAAS,UAAC3I,EAAqBA,CAACC,WAAMA,EAAAA,EAAQ,GAAfD,GACjC,EACA,CACEqE,IAHsCpE,SAItC0I,QACE,UAACvI,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,SAAUsF,eAAgB,QAAQ,EAAGjC,QAAS,CAAC2H,KAAM,CAAC,WAC1EwC,EACC,UAACM,GAAAA,CAAYA,CAAAA,CAAYxS,YAAaA,EAAayS,OAAQP,GAAxC5S,GAEnB,UAAC0R,EAAAA,CAAQA,CAAAA,CAAYxK,QAAQ,IAACyK,aAAa,IAAC7C,SAAS,EAAOrF,OAAO,UAApDzJ,IAIvB,EACD,GAGP,KAwCF,GAGFoT,GAA2BxB,WAAW,CAAG,6BAEzC,IAAMyB,GAAgD,CACpD,CAACvB,EAAAA,GAAUA,CAACC,KAAK,CAAC,CAAE,eACpB,CAACD,EAAAA,GAAUA,CAACG,UAAU,CAAC,CAAE,8BACzB,CAACH,EAAAA,GAAUA,CAACE,gBAAgB,CAAC,CAAE,8BAC/B,CAACF,EAAAA,GAAUA,CAACI,gBAAgB,CAAC,CAAE,0BAC/B,CAACJ,EAAAA,GAAUA,CAACK,WAAW,CAAC,CAAE,qBAC1B,CAACL,EAAAA,GAAUA,CAACM,UAAU,CAAC,CAAE,oBACzB,CAACN,EAAAA,GAAUA,CAACO,QAAQ,CAAC,CAAE,kBACvB,CAACP,EAAAA,GAAUA,CAACQ,OAAO,CAAC,CAAE,qBACxB,ECxManE,GAAmB,sCAAHA,YAAqD,GAEvC,OAAC,UAACmF,CAAQ,CAA8B,GACjF,MACE,WAACC,GAAAA,EAASA,CAAAA,CAACC,gBAAiBrF,GAAkBsF,MAAM,cAClD,UAACC,GAAAA,EAAUA,CAAAA,EAD+BvF,QAExC,UAAC5I,MAAAA,CAAIiB,MAAO,CAACuH,SAAU,WAAY4F,IAAK,MAAM,WAAIL,MAEpD,UAACI,GAAAA,EAAUA,CAAAA,UAAC,SACZ,UAACA,GAAAA,EAAUA,CAAAA,UAAC,SACZ,UAACA,GAAAA,EAAUA,CAAAA,UAAC,WACZ,UAACA,GAAAA,EAAUA,CAAAA,UAAC,cACZ,UAACA,GAAAA,EAAUA,CAAAA,UAAC,eAGlB,EAAE,GAE+BhG,CAAAA,EAAAA,GAAAA,EAAAA,CAAMA,CAAClF,EAAAA,CAAGA,EAAAA,UAAAA,CAAAA,uFAEhB2F,oBCqBpB,IAAMyF,GAAmCjF,CAAAA,EAAAA,EAAAA,SDrBLR,CCqBKQ,CAAUA,CACxD,CAAChM,EAAyBiM,SA6EtBW,EA5EF,GAAM,OAACvB,CAAK,CAAEhO,MAAI,CAAEU,aAAW,SAAEoO,CAAO,iBAAEC,CAAe,CAAC,CAAGpM,EAGvDqM,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAC,KAE9BC,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAC1Bb,GACA,CACEvK,UAAW,CACTqL,MAHiBd,GAGP,CACRzK,eAAgBnD,EAAYV,IAAI,CAChC2D,uBAAwBjD,EAAYkD,QAAQ,CAC5CS,aAAcrE,CAChB,CACF,EACAqP,KAAM,CAACL,EACPM,6BAA6B,CAC/B,GAGIC,EAAoCJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAGhDK,GAAAA,CAA+BA,CAAE,CACjCzL,UAAW,CACTK,iBAAkB,CAChBP,eAAgBnD,EAAYV,IAAI,CAChC2D,uBAAwBjD,EAAYkD,QAAQ,CAC5CS,aAAcrE,CAChB,CACF,EACAqP,KAAM,CAACL,CACT,GAEAS,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACP,EAAaQ,GAAAA,EAAeA,EACtDD,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACF,EAAmCG,GAAAA,EAAeA,EAE5E,GAAM,MAAC5L,CAAI,CAAC,CAAGoL,EAETL,EAAelP,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC3B,OAAImE,EAAAA,KAAAA,EAAAA,EAAM6L,MAAN7L,SAAqB,CAACI,UAAAA,IAAe,WAChC,CAD4C,IAI9CJ,EAAK6L,eAAe,CAC1B,CAAC7L,EAAK,EAWH8L,QAAgBf,EAAAA,KAAAA,EAAAA,EAAce,aAAa,CAA3Bf,EAEAlP,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC5B,GAAI,CAACiQ,EACH,MAAO,CAAC1I,MADU,IACA,CAAI,EAGxB,GAAM,oBAAC2M,CAAkB,mBAAEC,CAAiB,CAAEvM,QAAM,CAAC,CAAGqI,SACpDrI,IAAWC,EAAAA,GAAiBA,CAACC,OAAO,EAAKqM,EAAD,IAG7BtM,EAAAA,GAAiBA,CAACE,OAH+B,EAGnBmM,EAAD,CAGpC3M,UAAU,CAAK,EAFd,CAACA,GADuD,OAC7C,EAAM/C,QAAS,mDAAmD,EAH7E,CAAC+C,UAAU,EAAM/C,QAAS,kDAAkD,CAMvF,EAAG,CAACyL,EAAc,EAEZvH,QAAOwG,EAAAA,KAAAA,EAAAA,EAAce,aAAa,CAACmD,KAAK,CAAC,EAAE,CAC3CgB,EAAUlF,OAAAA,EAAAA,KAAAA,EAAAA,EAAcmF,YAAY,EAAG,CAAC,CAACA,aAAcnF,EAAamF,YAAY,EAAE,CAAG,KACrFC,EACJ1E,CAAAA,OAAAA,EAAAA,EAAkCzL,IAAAA,EAAlCyL,KAAAA,EAAAA,EAAwCI,GAAxCJ,YAAuD,CAACrL,UAAAA,IAAe,WACnEqL,EAAkCzL,IAAI,CAAC6L,eAAe,CAACsE,cAAc,CACrE,KAEN,MACE,UAAC1O,MAAAA,CAAIqJ,IAAKA,EAAKsF,aAAYlG,WACzB,WAACmG,GAAiBA,CAAC7J,OAAO,MAAR6J,aAChB,UAACC,GAAAA,EAAOA,CAAAA,UACN,UAACvH,EAAAA,CAAOA,CAAAA,CACNwH,QAASC,EAAcpN,QAAQ,CAC/BY,QAASwM,EAAcnQ,OAAO,EAAI,GAClC+D,UAAU,eAEV,UAACwJ,EAAAA,CAAQA,CAAAA,CAACxK,SAAUoN,EAAcpN,QAAQ,CAAE4H,QAASA,EAASyF,SA1CvD,CA0CiEA,GAzChF,GAAIxF,GAAmByF,EAAEC,MAAM,YAAYC,iBAAkB,CAC3D,GAAM,SAAC5F,CAAO,CAAC,CAAG0F,EAAEC,MAAM,CAG1B1F,EAAgB,SAACD,EAAS6F,SADxBH,EAAEI,WAAW,YAAYC,YAAcL,EAAEI,WAAW,CAACE,gBAAgB,CAAC,QACtC,EACpC,CACF,QAsCM,UAACV,GAAAA,EAAOA,CAAAA,UACN,UAAC5L,EAAAA,CAAGA,CAAAA,CACFgC,KAAM,CACJpF,UAAW,MACXqF,IAAK,EACLtE,WAAY,aACZuE,eAAgB,eAClB,WAEA,WAAClC,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACuK,KAAM,EAAGtK,IAAK,CAAC,YACxBoE,EACC,iCACE,UAAC2C,GAAAA,CAAcA,CAAAA,CAAY9Q,YAAaA,EAAa+Q,SAAU5C,GAA1C7O,GACpB2N,GACCkB,EAAae,aAAa,CAACrI,MAAM,CACjCsH,CAFWlB,CAEEiC,aAAa,CAACoF,YAAY,KAI3C,UAACzP,MAAAA,CAAIiB,MAAO,CAACuD,MAAO,EAAE,IAExB,UAACmG,EAAAA,EAAIA,CAAAA,CAACC,GAAIJ,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACrP,EAAa,cAAmB,OAALV,aAC5D,UAACiV,GAAAA,CAAcA,CAAAA,CAACzT,KAAMxB,aAK9B,UAACoU,GAAAA,EAAOA,CAAAA,UACLvF,EACC,WAACrG,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,SAAUqF,IAAK,CAAC,YACrC,UAACuB,GAAOA,CACNC,WADMD,EACQ6C,EAAa5C,YAAY,CACvCC,kBAAmB2C,EAAa3C,iBAAiB,GAElD2C,EAAae,aAAa,CAACsF,QAAQ,EACpCrG,EAAae,aAAa,CAACrI,MAAM,GAAKC,EAAAA,GAAiBA,CAACC,OAAO,CAC7D,UAACmB,EAAAA,EAAOA,CAAAA,UACN,WAACrD,MAAAA,CACCiB,MAAO,CACL2O,SAAU,SACVC,WAAY,SACZC,SAAU,OACVC,aAAc,UAChB,YACD,iBAEC,UAACC,GAAAA,CAAgBA,CAAAA,CACfzM,UAAW+F,EAAae,aAAa,CAACsF,QAAQ,CAACpM,SAAS,CACxDiE,SAAU8B,EAAa3C,iBAAiB,CACxCsJ,WAAY,CAACC,aAAa,EAAOC,cAAc,CAAI,SAIvD,QAGN,UAACC,GAAAA,EAAaA,CAAAA,CAACzG,YAAaA,MAGhC,UAACkF,GAAAA,EAAOA,CAAAA,UACN,UAAC7O,MAAAA,UACC,UAACqQ,GAAAA,CAAoBA,CAAAA,CACnBlV,YAAaA,EACbmV,eAAe,WACf9B,QAASA,EACTE,eAAgBA,QAItB,UAACG,GAAAA,EAAOA,CAAAA,UACL/L,EACC,UAAC9C,MAAAA,UACC,UAACuQ,GAAAA,CAAaA,CAAAA,CAACzN,KAAMA,EAAM0N,eAAe,WAG5C,UAACJ,GAAAA,EAAaA,CAAAA,CAACzG,YAAaA,MAGhC,UAACkF,GAAAA,EAAOA,CAAAA,UACLvF,OAAAA,EAAAA,KAAAA,EAAAA,EAAce,aAAAA,CAAdf,GAA+BA,QAAAA,KAAAA,EAAAA,EAAce,QAAdf,KAA2B,CAAC+B,IAAI,CAAC,IAC/D,UAACoF,GAAAA,CAAcA,CAAAA,CACb9E,IAAKrC,EAAae,aAAa,CAACgB,IAAI,CAAC,EAAE,CACvC5Q,KAAMA,EACNiW,YAAY,EACZC,SAAS,IACTC,aAAa,IAGf,UAACR,GAAAA,EAAaA,CAAAA,CAACzG,YAAaA,UAMxC,GACA,GChM4CP,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CACtD,CAAChM,EAAciM,SA8EX8D,EA7EF,GAAM,OAAC1E,CAAK,MAAEhO,CAAI,aAAEU,CAAW,SAAEoO,CAAO,iBAAEC,CAAe,CAAC,CAAGpM,EAGvDqM,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAAC,KAE9BuD,EAAoBrD,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAChCsD,GACA,CACE1O,UAAW,CACTqL,IAHeqD,KAGL,CACR5O,eAAgBnD,EAAYV,IAAI,CAChC2D,uBAAwBjD,EAAYkD,QAAQ,CAC5CK,WAAYjE,CACd,CACF,EACAqP,KAAM,CAACL,CACT,GAGI0D,EAAkCvD,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAG9CwD,GAAAA,CAA6BA,CAAE,CAC/B5O,UAAW,CACTC,eAAgB,CACdH,eAAgBnD,EAAYV,IAAI,CAChC2D,uBAAwBjD,EAAYkD,QAAQ,CAC5CK,WAAYjE,CACd,CACF,EACAqP,KAAM,CAACL,CACT,GAEAS,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAAC+C,EAAmB9C,GAAAA,EAAeA,EAC5DD,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAACiD,EAAiChD,GAAAA,EAAeA,EAE1E,GAAM,MAAC5L,CAAI,CAAC,CAAG0O,EAETI,EAAajT,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACrBmE,OAAAA,EAAAA,KAAAA,EAAAA,EAAM+O,MAAN/O,OAAmB,CAACI,UAAAA,IAAe,SAC9B,CADwC,IAI1CJ,EAAK+O,aAAa,CACxB,CAAC/O,EAAK,EAWHgP,QAAcF,EAAAA,KAAAA,EAAAA,EAAYE,WAAW,CAErCwB,EAAgB3U,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC5B,GAAI,CAACmT,EACH,MAAO,CAAC5L,IADQ,MACE,CAAI,EAGxB,GAAM,oBAAC2M,CAAkB,CAAEC,mBAAiB,QAAEvM,CAAM,CAAC,CAAGuL,SACxD,IAAetL,EAAAA,GAAiBA,CAACC,OAAO,EAAKqM,EAAD,IAG7BtM,EAAAA,GAAiBA,CAACE,OAH+B,EAGnBmM,EAAD,CAGpC3M,UAAU,CAAK,EAFd,CAACA,GADuD,OAC7C,EAAM/C,QAAS,iDAAiD,EAH3E,CAAC+C,UAAU,EAAM/C,QAAS,gDAAgD,CAMrF,EAAG,CAAC2O,EAAY,EAEVzK,EAAOuK,QAAAA,KAAAA,EAAAA,EAAYE,MAAZF,KAAuB,CAACG,KAAK,CAAC,EAAE,CAEvCC,QAAaJ,EAAAA,KAAAA,EAAAA,EAAYI,UAAU,CACnCC,CADaL,CACAI,EAAanB,EAAgB,CAACmB,EAAW,CAAG,KACzDoD,EACJ1D,CAAAA,OAAAA,EAAAA,EAAgC5O,IAAAA,EAAhC4O,KAAAA,EAAAA,EAAsCG,GAAtCH,UAAmD,CAACxO,UAAAA,IAAe,SAC/DwO,EAAgC5O,IAAI,CAAC+O,aAAa,CAACoB,cAAc,CACjE,KAEN,MACE,UAAC1O,MAAAA,CAAIqJ,IAAKA,EAAKsF,aAAYlG,WACzB,WAACmG,GAAiBA,CAAC7J,OAAO,MAAR6J,aAChB,UAACC,GAAAA,EAAOA,CAAAA,UACN,UAACvH,EAAAA,CAAOA,CAAAA,CACNwH,QAASC,EAAcpN,QAAQ,CAC/BY,QAASwM,EAAcnQ,OAAO,EAAI,GAClC+D,UAAU,eAEV,UAACwJ,EAAAA,CAAQA,CAAAA,CAACxK,SAAUoN,EAAcpN,QAAQ,CAAE4H,QAASA,EAASyF,SA5CvD,CA4CiEA,GA3ChF,GAAIxF,GAAmByF,EAAEC,MAAM,YAAYC,iBAAkB,CAC3D,GAAM,SAAC5F,CAAO,CAAC,CAAG0F,EAAEC,MAAM,CAG1B1F,EAAgB,SAACD,EAAS6F,SADxBH,EAAEI,WAAW,YAAYC,YAAcL,EAAEI,WAAW,CAACE,gBAAgB,CAAC,QACtC,EACpC,CACF,QAwCM,UAACV,GAAAA,EAAOA,CAAAA,UACN,UAAC5L,EAAAA,CAAGA,CAAAA,CACFgC,KAAM,CACJpF,UAAW,MACXqF,IAAK,EACLtE,WAAY,aACZuE,eAAgB,eAClB,WAEA,WAAClC,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACuK,KAAM,EAAGtK,IAAK,CAAC,YAExBmI,EACC,UAACM,GAAAA,CAAYA,CAAAA,CAAYxS,YAAaA,EAAayS,OAAQP,GAAxC5S,GAEnB,UAACuF,MAAAA,CAAIiB,MAAO,CAACuD,MAAO,EAAE,IAExB,UAACmG,EAAAA,EAAIA,CAAAA,CAACC,GAAIJ,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACrP,EAAa,YAAiB,OAALV,aAC1D,UAACiV,GAAAA,CAAcA,CAAAA,CAACzT,KAAMxB,aAK9B,UAACoU,GAAAA,EAAOA,CAAAA,UACN,UAAC7O,MAAAA,UACE0N,EACCA,EAAW5C,WAAW,CACpB,UAACxD,EAAAA,CAAOA,CAAAA,CACN/E,QAAS,UAACvC,MAAAA,CAAIiB,MAAO,CAAC6O,SAAU,OAAO,WAAIpC,EAAW5C,WAAW,GACjEnI,UAAU,eAEV,UAAC4E,EAAAA,CAAGA,CAAAA,CAACzL,KAAM4R,EAAW5R,IAAI,UAAG4R,EAAWjT,IAAI,KAG9C,UAAC8M,EAAAA,CAAGA,CAAAA,CAACzL,KAAM4R,EAAW5R,IAAI,UAAG4R,EAAWjT,IAAI,GAE5C,SAGR,UAACoU,GAAAA,EAAOA,CAAAA,UACLxB,EACC,UAACrN,MAAAA,UACC,UAACqQ,GAAAA,CAAoBA,CAAAA,CACnB7B,QAASnB,EAAWmB,OAAO,EAAI,KAC/BrT,YAAaA,EACbuT,eAAgBmC,EAChBP,eAAgBjD,EAAWI,UAAU,KAIzC,UAAC2C,GAAAA,EAAaA,CAAAA,CAACzG,YAAawD,MAGhC,UAAC0B,GAAAA,EAAOA,CAAAA,UACL/L,EACC,UAAC9C,MAAAA,UACC,UAACuQ,GAAAA,CAAaA,CAAAA,CAACzN,KAAMA,EAAM0N,eAAe,WAG5C,UAACJ,GAAAA,EAAaA,CAAAA,CAACzG,YAAasD,MAGhC,UAAC4B,GAAAA,EAAOA,CAAAA,UACLxB,OAAAA,EAAAA,KAAAA,EAAAA,EAAYE,WAAAA,CAAZF,SAA2BA,EAAAA,KAAAA,EAAAA,EAAYE,WAAW,CAAvBF,IAA4B,CAAC,IACvD,UAACoD,GAAAA,CAAcA,CAAAA,CACb9E,IAAK0B,EAAWE,WAAW,CAAClC,IAAI,CAAC,EAAE,CACnC5Q,KAAMA,EACNiW,WAAY,GACZC,SAAS,IACTC,aAAa,IAGf,UAACR,GAAAA,EAAaA,CAAAA,CAACzG,YAAasD,UAMxC,GACA,uCC/MK,IAAM6D,GAAoB,CAAC3V,EAA0BkG,IACnD,GAA4CA,MAAAA,CAAzC3F,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACP,GAAa,KAAkB,OAAfkG,8BC6B9C,IAAM0P,GAAmB,OAAC,CAC/BC,OAAK,gBACLC,CAAc,aACdC,CAAW,CACXC,sBAAoB,CACd,GACA,sBAACC,CAAoB,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,GACxCC,EAAYC,EAAAA,MAAY,CAAwB,MAChDC,EAAUD,EAAAA,OAAa,CAC3B,IAAMP,EAAM3W,GAAG,CAAC,OAAC,aAACc,CAAW,CAAC,SAAKO,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACP,KAC5D,CAAC6V,EAAM,EAEH,cAACS,CAAY,UAAEhH,CAAQ,aAAEiH,CAAW,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,CAAqBA,CACjEC,GAAAA,CAAsBA,CACtBJ,GAGIK,EAAuBN,EAAAA,OAAa,CAAC,KACzC,IAAMO,EAAkB,EAAE,CA0B1B,OAzBAd,EAAMe,OAAO,CAAC,OAAC,aAAC5W,CAAW,WAAE6W,CAAS,SAAEC,CAAO,CAAC,GAC9CH,EAAKxJ,IAAI,CAAC,CACR1L,KAAM,qBACNzB,EACA+W,cAAeF,EAAUpX,MAAM,CAC/BuX,YAAaF,EAAQrX,MAAM,GAE7B,IAAMwX,EAAU1W,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACP,GAEzC,GAAIsW,EAAaY,QAAQ,CAACD,GAAU,CAClC,IAAME,EAAa,IAAIC,IAAIN,GACrBO,EAAe,IAAID,IAAIP,GACL,IAAIC,KAAYD,EAAU,CAACS,IAAI,CAAC,CAACC,EAAGC,IAC1DC,EAAAA,EAAeA,CAACC,OAAO,CAACH,EAAGC,IAGbZ,OAAO,CAAC,IAClBO,EAAWpX,GAAG,CAACT,GACjBqX,EAAKxJ,EADmB,EACf,CAAC,CAAC1L,KAAM,qBAAUzB,EAAayS,OAAQnT,CAAI,GAC3C+X,EAAatX,GAAG,CAACT,IAC1BqX,EAAKxJ,CAD4B,GACxB,CAAC,CAAC1L,KAAM,uBAAYzB,EAAa+Q,SAAUzR,CAAI,EAE5D,EACF,CACF,GACOqX,CACT,EAAG,CAACd,EAAOS,EAAa,EAElBqB,EAAqBC,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAAC/B,EAAM3W,GAAG,CAAC,OAAC,aAACc,CAAW,CAAC,UAAKA,EAAYV,IAAI,IAEzFuY,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,CAAC,CACpC5V,MAAOwU,EAAUjX,MAAM,CACvBsY,iBAAkB,IAAM5B,EAAU6B,OAAO,CACzCC,aAAc,IACZ,IAAMC,EAAMxB,CAAS,CAACyB,EAAG,CACzB,MAAOD,OAAAA,EAAAA,KAAAA,EAAAA,EAAKzW,IAAAA,CAALyW,GAAc,SAAW,GAAK,EACvC,EACAE,SAAU,EACZ,GAEMC,EAAcR,EAAeS,YAAY,GACzCC,EAAQV,EAAeW,eAAe,GAE5C,MACE,UAAC3T,MAAAA,CAAIiB,MAAO,CAAC2O,SAAU,QAAQ,WAC7B,WAACvI,GAAAA,EAASA,CAAAA,CAACgC,IAAKiI,YACbF,EAAuB,KAAO,UAACwC,GAA2BA,CAAC7F,SAAUkD,IACtE,UAAC4C,GAAAA,EAAKA,CAAAA,CAACC,aAAcN,WAClBE,EAAMrZ,GAAG,CAAC,OAAC,OAACoO,CAAK,KAAEvB,CAAG,MAAElM,CAAI,CAAEiD,OAAK,CAAC,GAC7BoV,EAAexB,CAAS,CAACpJ,EAAM,CAC/B7L,EAAOyW,EAAKzW,IAAI,CACtB,GAAa,UAAU,CAAnBA,EACF,MACE,UAACmX,EAAAA,EAAGA,CAAAA,CAAC9I,QAASjQ,EAAMgZ,OAAQ/V,WAC1B,UAACgW,GAAAA,EAAcA,CAAAA,CACb9Y,YAAakY,EAAIlY,WAAW,CAC5BkO,IAAK2J,EAAekB,cAAc,CAClCzL,MAAOA,EACPgC,SAAUA,EACViH,YAAaA,EACbyC,SAAU1C,EAAaY,QAAQ,CAAC3W,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAAC2X,EAAIlY,WAAW,GACxEiZ,aAActB,EAAmB5X,GAAG,CAACmY,EAAIlY,WAAW,CAACV,IAAI,EACzD4Z,aACE,WAACpR,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,CAAC,YAClC,UAACoC,EAAAA,CAAOA,CAAAA,CACN/E,QACsB,IAApB8Q,EAAIlB,WAAW,CAAS,WAAa,GAAmB,OAAhBkB,EAAIlB,WAAW,CAAC,YAE1DxP,UAAU,eAEV,UAAC4E,EAAAA,CAAGA,CAAAA,CAACzL,KAAK,mBAAWuX,EAAIlB,WAAW,KAEtC,UAAC7K,EAAAA,CAAOA,CAAAA,CACN/E,QACwB,MAAlB2P,aAAa,CACb,aACA,GAAqB,OAAlBmB,EAAInB,aAAa,CAAC,cAE3BvP,UAAU,eAEV,UAAC4E,EAAAA,CAAGA,CAAAA,CAACzL,KAAK,oBAAYuX,EAAInB,aAAa,WA3BThL,GAoC5C,GAAa,WAATtK,EAAmB,CACrB,IAAM0X,EAAYxD,GAAkBuC,EAAIlY,WAAW,CAAEkY,EAAIzF,MAAM,SAC/D,EAEI,UAACmG,EAAAA,EAAGA,CAAAA,CAAC9I,IAFiB,IAERjQ,EAAMgZ,OAAQ/V,WAC1B,UAAC4P,GAA0BA,CAEzBpF,MAAOA,EACPY,IAAK2J,EAAekB,QAHKrG,MAGS,CAClCpT,KAAM4Y,EAAIzF,MAAM,CAChBrE,QAAS2H,EAAYhW,GAAG,CAACoZ,GACzB9K,gBAAiB2H,EAAqBmD,GACtCnZ,YAAakY,EAAIlY,WAAW,EANvB+L,IAF+BA,GAe1C,UAAC6M,EAAAA,EAAGA,CAAAA,CAAC9I,QAASjQ,EAAMgZ,OAAQ/V,WAC1B,UAACsW,GAA8BA,CAC7B9L,MAAOA,EACPY,IAAK2J,EAAekB,YAFSK,EAEK,CAClC9Z,KAAM4Y,EAAIzF,MAAM,CAChBrE,QAAS2H,EAAYhW,GAAG,CAACoZ,GACzB9K,gBAAiB2H,EAAqBmD,GACtCnZ,YAAakY,EAAIlY,WAAW,IAPQ+L,EAW5C,CAEA,GAAa,aAATtK,EAAqB,CACvB,IAAM4X,EAAc1D,GAAkBuC,EAAIlY,WAAW,CAAhB2V,EAAsB5E,QAAQ,SAEnE,EAEI,UAAC6H,EAAAA,EAAGA,CAAAA,CAAC9I,IAFiB,IAERjQ,EAAMgZ,OAAQ/V,WAC1B,UAACwW,GAA4BA,CAE3BhM,MAAOA,EACPY,IAAK2J,EAAekB,UAHOO,IAGO,CAClCha,KAAM4Y,EAAInH,QAAQ,CAClB3C,QAAS2H,EAAYhW,GAAG,CAACsZ,GACzBhL,gBAAiB2H,EAAqBqD,GACtCrZ,YAAakY,EAAIlY,WAAW,EANvB+L,IAF+BA,GAe1C,UAAC6M,EAAAA,EAAGA,CAAAA,CAAC9I,QAASjQ,EAAMgZ,OAAQ/V,WAC1B,UAACoQ,GAAgCA,CAE/B5F,MAAOA,EACPY,IAAK2J,EAAekB,cAAc,CAClCzZ,KAAM4Y,EAAInH,QAAQ,CAClB3C,QAAS2H,EAAYhW,GAAG,CAACsZ,GACzBhL,gBAAiB2H,EAAqBqD,GACtCrZ,YAAakY,EAAIlY,WAAW,EANvB+L,IAF+BA,EAY5C,CAEA,MAAO,UAAClH,MAAAA,CAAAA,EAASkH,EACnB,SAKV,EAAE,gECvNK,IAAMwN,GAAqC,GAI9C,EAAkBpG,kBAAkB,EAClCrP,EAAiB+C,MAAM,GAAKC,EAAAA,GAAiBA,CAACE,OAAO,EACtDlD,EAAiBsP,iBAAiB,EAAItP,EAAiB+C,MAAM,GAAKC,EAAAA,GAAiBA,CAACC,OAAO,qJCChG,IAAMyS,GAAoB,EAAE,CAIfC,GAAyB,OAAC,SACrCC,CAAO,MACPC,CAAI,SACJC,CAAO,CAKR,GACOC,EAAgB5a,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,UAAM0a,EAAAA,KAAAA,EAAAA,EAAMza,GAAG,CAAC4a,EAAVH,EAA+B,CAACA,EAAK,EACzE,MAAOxZ,CAAAA,EAAAA,GAAAA,EAAAA,CAAkBA,CAAM,CAC7B,GAAGO,EAAU,CACbN,UAAWnB,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAChB,IACEya,EAAQxa,GAAG,CAAC,GAAY,QACtBmB,EACAC,MAAO,CAACD,EAAM0L,GAAG,CAAG,IAAM1L,EAAMA,KAAK,CAAC,CACxC,GACF,CAACqZ,EAAQ,EAEXjZ,UAAW,QACXb,YAAOia,EAAAA,EAAiBL,GACxBhZ,eAAiBuZ,IACf,IAAMC,EAAW/Z,MAAMC,IAAI,CAAC6Z,EAC5BH,UAAAA,EAAUI,EACZ,EACAC,IAFEL,UAEY,CAChB,EACF,EAAE,GAEoD,OAAC,SAACF,CAAO,CAAmB,GAC1E,CAACC,EAAMC,EAAQ,CAAGM,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAAQ,CAACC,SAAU,MAAM,GAEvE,OAAOV,GAAuB,SAC5BC,OACAC,UACAC,CACF,EACF,EAAE,GAEgCQ,KAC/BC,GACQA,EAERA,GAAQ,CAACA,EAAItO,CAJyBqO,EAItB,CAAEC,EAAIha,KAAK,CAAC,CAACia,IAAI,CAAC,UACnC,GAoC+C,CAC/Chb,KAAM,MACNqB,KAAM,MACNC,YAAa,OAAC,OAACP,CAAK,CAAC,GACnB,MACE,UAACQ,GAAAA,EAAgCA,CAAAA,CAC/BC,KAAMyZ,CAAAA,EAAAA,GAAAA,CAAAA,CAAcA,CAAC,CAACxO,IAAK1L,EAAM0L,GAAG,CAAE1L,MAAOA,EAAMA,KAAK,IAG9D,EACAU,eAAgB,OAAC,OAACV,CAAK,KAAE0L,CAAG,CAAC,SAAK,GAAW1L,MAAAA,CAAR0L,EAAI,MAAU,OAAN1L,IAC7Cma,UAAW,QACb,EAAE,GCvGwC,KACxC,GAAM,CAAC5a,EAAOY,EAAe,CAAG0Z,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAAyB,CAC7EO,OAAQ,GAAW,EAACC,EAAD,gBAAoBC,EAAK9a,IAAI,CAAGI,MAAMC,IAAI,CAACya,GAAML,IAAI,CAAC,UAAO7b,EAAS,EACzFmc,OAAQ,IACN,IAAM/T,EAASgU,EAAGH,iBAAiB,OACnC,UAAI,OAAO7T,EACF,IAAIuQ,IAAIvQ,EAAOqE,KAAK,CAAC,MAEvB,IAAIkM,GACb,CACF,GACA,MAAOjX,CAAAA,EAAAA,GAAAA,EAAAA,CAAkBA,CAAoB,CAC3Cb,KAAM,gBACNqB,KAAM,aACNP,UAAW,CACT,CAACC,MAAOyG,EAAAA,GAAiBA,CAACC,OAAO,CAAEzG,MAAO,CAAC,KAAM,UAAU,EAC3D,CAACD,MAAOyG,EAAAA,GAAiBA,CAACE,OAAO,CAAE1G,MAAO,CAAC,MAAO,UAAU,EAC7D,CACDU,OAAQ,GAAWX,EACnBO,YAAa,OAAC,OAACP,CAAK,CAAC,SACnB,UAAC4L,OAAAA,UAAM5L,IAAUyG,EAAAA,GAAiBA,CAACC,OAAO,CAAG,UAAY,mBAE3DnH,iBACAY,EACAO,eAAgB,GAAWV,CAC7B,EACF,EAAE,4BCWF,YAAKya,CAAAA,qDAAAA,GAAAA,IAAAA,CAAAA,GAKL,IAAMC,GAA0B,CAC9BlE,UAAW,CACTtQ,MAAO,YACPlG,MAAO,CAACoB,KAAM,YAAa8E,MAAO,WAAW,EAC7CjG,MAAO,CAAC,YAAY,EAEtBwW,QAAS,CACPvQ,MAAO,UACPlG,MAAO,CAACoB,KAAM,UAAW8E,MAAO,SAAS,EACzCjG,MAAO,CAAC,UAAU,CAEtB,EAEM0a,GAAwB1V,OAAOyU,MAAM,CAACgB,IACtCE,GAAgC,IAAI7D,IAAI9R,OAAOyU,MAAM,CAACe,KAE/CI,GAAuB,KAClCC,CAAAA,EAAAA,GAAAA,EAAAA,CAAgBA,GAChBC,CAAAA,EAAAA,GAAAA,CAAAA,CAAgBA,CAAC,cAEjB,GAAM,UACJ1c,CAAQ,cACRC,CAAY,CACZ0c,iBAAkBC,CAAgB,CAClClY,KAAMmY,CAAU,CACjB,CAAGzc,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,GAAAA,EAAgBA,EAEzByc,EAAkCC,CAAAA,EAAAA,GAAAA,CAAAA,CAA4BA,GAE9D,CAACC,EAAaC,EAAe,CAAGzB,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAAS,CACnEC,SAAU,SACVyB,SAAU,CAACC,OAAQ,EAAE,CACvB,GAEM,CAACC,EAAiBC,EAAmB,CAAG7B,CAAAA,EAAAA,GAAAA,CAAAA,CAAsBA,CAAsB,CACxFO,OAAQ,GAAW,EAACtF,EAAD,aAAiBwF,EAAK9a,IAAI,CAAGI,MAAMC,IAAI,CAACya,GAAML,IAAI,CAAC,UAAO7b,EAAS,EACtFmc,OAAQ,GACN,UAAI,OAAOC,EAAG1F,cAAc,CAEnB,IAAIiC,IADIyD,EAAG1F,cAAc,CAACjK,KAAK,CAAC,KAE9BpL,MAAM,CAAC,GAAWmb,GAAiBlb,GAAG,CAACM,KAG3C,IAAI+W,GAEf,GAEM4E,EAAwB/c,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC7B,IAAImY,IACTnX,MAAMC,IAAI,CAAC4b,GAAiB5c,GAAG,CAC7B,GAAU6b,EAAuB,CAACtZ,EAAuB,CAACpB,KAAK,GAGlE,CAACyb,EAAgB,EAEdG,EAAqB3d,CAAAA,EAAAA,GAAAA,CAAAA,CAAqBA,GAC1C4d,EAAqBC,KACrBC,EAAuBjc,CAAAA,EAAAA,GAAAA,EAAAA,CAAkBA,CAAC,CAC9Cb,KAAM,GAF6C6c,eAGnD/b,UAAW4a,GACXra,KAAM,uBACNI,eAAgB,GAAWV,EAAMkG,KAAK,CACtC3G,MAAOoc,EACPpb,YAAa,OAAC,OAACP,CAAK,CAAC,SAAK,UAAC4L,OAAAA,UAAM5L,EAAMkG,KAAK,IAC5C/F,eAAgB,IACdub,EAAmB,IAAI3E,IAAInX,MAAMC,IAAI,CAACN,GAAOV,GAAG,CAAC,GAAWmB,EAAMoB,IAAI,GACxE,CACF,GAEM4a,EAAcpd,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC1B,IAAMqd,EAAgBhX,OAAOyU,MAAM,CAACwB,GAAYzb,MAAM,CACnDoD,GACyB,2BAAxBA,EAASM,UAAU,EAEjB+Y,EAAcC,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,CAAC7d,GACpC,OAAO8d,GAAaH,GAAexc,MAAM,CAAC,OAAC,aAACE,CAAW,CAAC,UACtDuc,EAAYxc,GAAG,CAACQ,CAAAA,EAAAA,GAAAA,EAAAA,CAAwBA,CAACP,KAE7C,EAAG,CAACub,EAAY5c,EAAa,EAEvB+d,EAAaC,GAAuC,CACxDjD,QAASkD,SFxDGA,CACF,CACZC,CAAwD,EAExD,GEoD4BD,GFpDrB3d,CAAAA,EAAAA,EAAAA,CEmDkD0d,MFnDlD1d,CAAOA,CACZ,IACEgB,MAAMC,IAAI,CACR,IAAIkX,IACF0F,EACGC,OAAO,CAAC,QAAOF,SAAAA,OAAAA,EAAAA,EAAQtF,GAAGrY,GAAG,CAAEmb,GAAQ2C,KAAKC,SAAS,CAAC5C,GAAAA,EAAvCwC,EAAgD,EAAE,GACjE/c,MADe+c,CACR,GAAOK,KAGlBhe,GAAG,CAAC,GAAa4a,GAAmBkD,KAAKG,KAAK,CAACC,KAC/C9F,IAAI,CAAC,CAACC,EAAGC,IAEuB,IAA/BD,EAAExL,GAAG,CAACsR,aAAa,CAAC7F,EAAEzL,EADM,CACH,EACrBwL,EAAElX,KAAK,CAACgd,aAAa,CAAC7F,EAAEnX,KAAK,EAC7BkX,EAAExL,GAAG,CAACsR,aAAa,CAAC7F,EAAEzL,GAAG,GAEnC,CAAC+Q,EAASD,EAAQ,CAEtB,EEmCMR,EACA1c,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,GACH,IACF2d,EAAWzG,SAAS,CAACkG,OAAO,CAAC,GAAchM,EAAS4I,IAAI,KACxD2D,EAAWxG,OAAO,CAACiG,OAAO,CAAC,GAAYtK,EAAOkH,IAAI,EACtD,CACA,EAAE,EAET,GACM,CAAC/Z,MAAO2d,CAAc,CAAC,CAAGb,EAE1Bc,EAAUve,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACrB,IAAM,CAACgd,EAAoBC,EAAoBE,EAAsBM,EAAW,CAChF,CAACT,EAAoBC,EAAoBE,EAAsBM,EAAW,EAEtE,CAACe,OAAQC,CAAY,CAAEC,kBAAgB,CAAC,CAAGC,CAAAA,EAAAA,GAAAA,CAAAA,CAAUA,CAAC,SAACJ,CAAO,GAE9D,CAAC5d,MAAOie,CAAY,CAAC,CAAG3B,EAExB4B,EAAkB7e,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACvBod,EAAYnd,GAAG,CAAC,OAAC,SAAC4X,CAAO,WAAED,CAAS,CAAE,GAAGkH,EAAK,GACnD,MAAO,CACL,GAAGA,CAAI,CACPjH,QAASA,EAAQhX,MAAM,CAAC,OAAC,aAACsS,CAAW,MAAEuH,CAAI,CAAC,WAExC4D,EAAe1d,IAAI,GACnB,CAACme,CAAAA,EAAAA,GAAAA,CAAAA,CAA8BA,CAAC/d,MAAMC,IAAI,CAACqd,GAAiB5D,EAAAA,GAC5D,EAGEkE,EAAahe,IAAI,GAAI,CAACge,EAAa9d,GAAG,CAACqS,EAAYvL,MAAM,GAAG,GAG5DiV,EAAgBjc,IAAI,GAAI,CAACic,EAAgB/b,GAAG,YAIlD,EAJ4E,CAK5E8W,UAAWA,EAAU/W,MAAM,CAAC,OAAC,eAACoP,CAAa,MAAEyK,CAAI,CAAC,WAE9C4D,EAAe1d,IAAI,GACnB,CAACme,CAAAA,EAAAA,GAAAA,CAAAA,CAA8BA,CAAC/d,MAAMC,IAAI,CAACqd,GAAiB5D,EAAAA,GAC5D,EAGEkE,EAAahe,IAAI,GAAI,CAACge,EAAa9d,GAAG,CAACmP,EAAcrI,OAAM,GAAG,IAG9ChH,IAAI,GAAI,CAACic,EAAgB/b,GAAG,cAIlD,EACF,CACF,GACC,CAACsc,EAAakB,EAAgBM,EAAc/B,EAAgB,EAEzDmC,EAAkBvC,EAAYwC,IAAI,GAAGC,iBAAiB,GACtDC,EAAYH,EAAgBxe,MAAM,CAAG,EAErC4e,EAAmBpf,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC/B,IAAMqf,EAAgBL,EAAgBE,iBAAiB,GACvD,OAAOL,EACJ5e,GAAG,CAAC,OAAC,aAACc,CAAW,WAAE6W,CAAS,CAAEC,SAAO,CAAC,SAAM,aAC3C9W,EACA6W,UAAWA,EACR/W,MAAM,CAAC,OAAC,MAACR,CAAI,CAAC,UAAKA,EAAK6e,iBAAiB,GAAGjH,QAAQ,CAACoH,KACrDpf,GAAG,CAAC,OAAC,MAACI,CAAI,CAAC,UAAKA,IACnBwX,QAASA,EACNhX,MAAM,CAAC,OAAC,MAACR,CAAI,CAAC,UAAKA,EAAK6e,iBAAiB,GAAGjH,QAAQ,CAACoH,KACrDpf,GAAG,CAAC,OAAC,MAACI,CAAI,CAAC,UAAKA,GACrB,IACCQ,MAAM,CAAC,OAAC,SAACgX,CAAO,WAAED,CAAS,CAAC,UAAKC,EAAQrX,MAAM,CAAG,GAAKoX,EAAUpX,MAAM,CAAG,GAC/E,EAAG,CAACqe,EAAiBG,EAAgB,EAI/BM,EAA6Btf,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAClC6e,EACJ5e,GAAG,CAAC,OAAC,aAACc,CAAW,WAAE6W,CAAS,SAAEC,CAAO,CAAC,GACrC,MAAO,IACFA,EACAhX,MAAM,CAAC,OAAC,aAACsS,CAAW,CAAC,UAAKmH,GAAmCnH,KAC7DlT,GAAG,CAAC,OAAC,CAACI,MAAI,QADkDia,KAChDnH,CAAW,CAAC,SAAM,aAC7BpS,OACAV,EACAmC,KAAM,SACNqC,iBAAkBsO,CACpB,OACCyE,EACA/W,MAAM,CAAC,OAAC,eAACoP,CAAa,CAAC,UAAKqK,GAAmCrK,KAC/DhQ,GAAG,CAAC,OAAC,MAACI,CAAI,CAAE4P,OADkDqK,QACrC,CAAC,SAAM,aAC/BvZ,OACAV,EACAmC,KAAM,WACNqC,iBAAkBoL,CACpB,IACH,GAEFyH,IAAI,GACN,CAACmH,EAAgB,EAIdU,EAAgCvf,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACrCsf,EAA2Brf,GAAG,CAAC,OAAC,aAACc,CAAW,MAAEV,CAAI,CAAC,UACxDqW,GAAkB3V,EAAaV,KAEhC,CAACif,EAA2B,EAEzB,CAAC,CAACE,WAAY1I,CAAW,CAAC,CAAE,iBAAC2I,CAAe,aAAEnI,CAAW,CAAC,CAAC,CAAGoI,CAAAA,EAAAA,GAAAA,CAAAA,CAAmBA,CACrFH,GAIII,EAA2B3f,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACvC,IAAM4f,EAAe,IAAIzH,IACvBiH,EACGnf,GAAG,CAAC,OAAC,aAACc,CAAW,WAAE6W,CAAS,SAAEC,CAAO,CAAC,GACrC,MAAO,IAAID,KAAcC,EAAQ,CAAC5X,GAAG,CAAC,GAAUyW,GAAkB3V,EAAaV,GACjF,GACCqX,IAAI,EAF8DhB,EAIvE,OAAO6I,EAA8B1e,MAAM,CAAC,GAAS+e,EAAa9e,GAAG,CAACgM,GACxE,EAAG,CAACyS,EAA+BH,EAAiB,EAI9CS,EAAqB7f,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACjC,IAAM8f,EAAsB,IAAI3H,IAC9BwH,EAAyB9e,MAAM,CAAC,GAAiBiW,EAAYhW,GAAG,CAACgM,KAEnE,OAAOwS,EAA2Bze,MAAM,CAAC,OAAC,aAACE,CAAW,MAAEV,CAAI,CAAC,GAC3D,OAAOyf,EAAoBhf,GAAG,CAAC4V,GAAkB3V,EAAaV,GAChE,EACF,EAAG,CAACsf,EAA0BL,EAFsB5I,EAEkB,EAEhEqJ,EAAoCR,EAA8B/e,MAAM,CAAG,EAC3Ewf,EAAeH,EAAmBrf,MAAM,CACxCyf,EAAwBN,EAAyBnf,MAAM,CAAG,EAqFhE,MACE,WAACqI,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,QAAQ,EAAGoB,MAAO,CAACqZ,OAAQ,OAAQ1K,SAAU,QAAQ,YAC1E,UAAC2K,EAAAA,CAAUA,CAAAA,CAAC/a,MAAO,UAACgb,EAAAA,EAASA,CAAAA,UAAC,iBACO,mBAApC7D,EACC,UAAC1T,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACE,WAAY,EAAE,EAAG2B,OAAO,kBACrC,UAAC0V,EAAAA,CAAcA,CAAAA,CAACC,IAAI,4BAEpB,KACJ,WAACzX,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACE,WAAY,GAAID,SAAU,EAAE,EACtC8B,KAAM,CACJpF,UAAW,MACXe,WAAY,SACZuE,eAAgB,gBAChBD,IAAK,GACLsK,KAAM,CACR,YAEA,WAACvM,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,EAAE,YAClC2T,EACD,UAAC8B,EAAAA,EAASA,CAAAA,CACR7e,KAAK,SACLN,MAAOqb,EACP7H,SAAU,GAAO8H,EAAe7H,EAAEC,MAAM,CAAC1T,KAAK,EAC9Cof,YAAY,kBACZ3Z,MAAO,CAACuD,MAAO,OAAO,OAG1B,UAAC8C,EAAAA,CAAOA,CAAAA,CACN/E,QAAQ,8DACRuM,QAASuL,GAAyB,CAACF,EACnCxX,UAAU,UACVkY,2BAA2B,aAE3B,UAACC,EAAwBA,CAAC3d,YAAa8c,SAAda,EAGXlgB,MAAM,CACtB,UAACqI,EAAAA,CAAGA,CAAAA,CACFC,QAAS,CAACC,SAAU,EAAGC,WAAY,EAAE,EACrC2B,OAAO,iBACPE,KAAM,CAACpF,UAAW,MAAOqF,IAAK,CAAC,WAE9B4T,IAED,KACHvW,CAjIW,KACd,GAAIkU,EACF,MACE,UAFkB,EAEjBxT,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOsF,eAAgB,QAAQ,EAAGjC,QAAS,CAACkL,IAAK,EAAE,WACxE,UAAC2M,EAAAA,CAAeA,CAAAA,CAACrZ,MAAM,2BAK7B,IAAMsZ,EAAiBnhB,EAASe,MAAM,CAAGd,EAAac,MAAM,QAE5D,EAAsBA,EAAlB,IAAwB,CAuD1B,UAACmW,GAAgBA,CACfE,YADeF,GAEboJ,EACE,UAACc,GAAAA,CAAWA,CAAAA,CACVb,aAAcA,EACdc,WAAYnB,EAAyBnf,MAAM,CAC3C8W,YAAaA,SAEb9X,EAENoX,MAAOwI,EACPtI,YAAaA,EACbC,qBAAsB0I,IAlEpBN,EAEA,SAFW,CAEVtW,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACkL,IAAK,EAAE,WACpB,UAAC+M,EAAAA,CAAaA,CAAAA,CACZrf,KAAK,SACL0D,MAAM,0BACNsL,YACEkQ,EACE,WAAChb,MAAAA,WAAI,2BACqB,UAACoB,SAAAA,UAAQyV,IAAqB,gDAIxD,WAAC7W,MAAAA,WAAI,2BACqB,UAACoB,SAAAA,UAAQyV,IAAqB,yCAWlE,UAAC5T,EAAAA,CAAGA,CAAAA,CAACC,QAAS,CAACkL,IAAK,EAAE,WACpB,UAAC+M,EAAAA,CAAaA,CAAAA,CACZrf,KAAK,SACL0D,MAAM,iBACNsL,YACEkQ,EACE,2DAEA,WAACI,EAAAA,EAAKA,CAAAA,WAAC,+CACwC,IAC7C,UAAC1I,IAAAA,CACCnI,KAAK,8CACL2E,OAAO,SACPmM,IAAI,sBAEJ,WAACpY,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,EAAGtE,WAAY,QAAQ,YAAG,+BAE3D,UAACC,EAAAA,EAAIA,CAAAA,CAACpG,KAAK,cAAcqG,MAAOC,EAAAA,EAAkB,gBA2BtE,OAmDF,EAAE,GAGasV,GAETuB,GAAe,IAGnB,IAAM0D,EAAUC,EAAgBlhB,EALCgc,CAKE,CALD,GAKamF,EAAMC,mBAAmB,EAElEC,EAAU,EAAE,CAElB,IAAK,IAAMF,KAASF,EAClB,GAAIE,GADuB,IACvBA,EAAAA,KAAAA,EAAAA,EAAO7c,OAAP6c,GAAO7c,IAAe,qBAI1B,CAJgD,GAI3C,IAAMpE,KAAQihB,EAAMG,YAAY,CAAE,CACrC,GAAM,MAAClhB,CAAI,WAAEuX,CAAS,SAAEC,CAAO,CAAC,CAAG1X,EAC7BY,EAAcb,CAAAA,EAAAA,GAAAA,EAAAA,CAAgBA,CAACG,EAAM+gB,EAAM/gB,IAAI,GAEjDwX,EAAQrX,MAAM,CAAG,GAAKoX,EAAUpX,MAAM,EAAG,GAAG,EACtC0N,IAAI,CAAC,aACXnN,YACA6W,UACAC,CACF,EAEJ,CAGF,MAAO2J,CAAAA,EAAAA,GAAAA,CAAAA,CAAeA,CAACF,EACzB,gEC1aO,IAAME,EAAkB,GACtB,IAAIF,EAAQ,CAACjJ,IAAI,CAAC,CAACC,EAAGC,KAC3B,IAAMkJ,EAAUngB,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,CAACgX,EAAEvX,WAAW,EAChD2gB,EAAUpgB,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,CAACiX,EAAExX,WAAW,EACtD,OAAO0gB,EAAQrD,aAAa,CAACsD,EAC/B,cCXF,WAAkB,oMCSX,IAAMrB,EAAiB,IAC5B,GAAM,KAACC,CAAG,CAAC,CAAGtd,EAER2e,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,CAA8BA,GAChDrF,EAAkCC,CAAAA,EAAAA,EAAAA,CAAAA,CAA4BA,GAEpE,MACE,WAACqF,EAAAA,EAAIA,CAAAA,CAACC,cAAexB,YACnB,UAACyB,EAAAA,CAAOA,CAAAA,CAACjd,GAAG,wBAAwBM,MAAM,wBAAwBoL,GAAG,gBAChC,mBAApC+L,EACC,UAACwF,EAAAA,CAAOA,CAAAA,CACNjd,GAAG,aACHM,MACE,WAACyD,EAAAA,CAAGA,CAAAA,CAACgC,KAAM,CAACpF,UAAW,MAAOqF,IAAK,EAAGtE,WAAY,QAAQ,YACxD,UAACZ,MAAAA,UAAI,qBACJ+b,EAAgB3Q,OAAO,CACtB,UAACzG,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cAEjB,UAAC5E,MAAAA,CACCiB,MAAO,CACLuD,MAAO,OACP8V,OAAQ,OACR8B,aAAc,MACdC,iBAC6B,IAA3BN,EAAgBO,MAAM,CAAavb,EAAAA,EAAiB,GAAKA,EAAAA,EAAiB,EAC9E,OAKR6J,GAAG,yBAEH,OAGV,EAAE,yECzCK,IAAM+M,EAAkB,GACtB,IAAIpF,IACTzY,EAAaO,GAAG,CAAC,GACfqB,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,CACtBpB,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACiiB,EAAO/hB,UAAU,CAACC,IAAI,CAAE8hB,EAAO7hB,kBAAkB,CAACD,IAAI","sources":["webpack://_N_E/../ui-core/src/ui/Filters/useCodeLocationFilter.tsx","webpack://_N_E/../ui-core/src/instigation/useInstigationStateReducer.tsx","webpack://_N_E/../ui-core/src/automation/AutomationStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/instigation/instigationStateSummary.tsx","webpack://_N_E/../ui-core/src/automation/AutomationBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/automation/LatestTickHoverButton.tsx","webpack://_N_E/../ui-core/src/schedules/hourOffsetFromUTC.tsx","webpack://_N_E/../ui-core/src/schedules/CronTag.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulesTable.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedScheduleRow.tsx","webpack://_N_E/../ui-core/src/automation/ObserveAutomationScheduleRow.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedSensorRow.tsx","webpack://_N_E/../ui-core/src/automation/ObserveAutomationSensorRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationScheduleRow.tsx","webpack://_N_E/../ui-core/src/automation/VirtualizedAutomationSensorRow.tsx","webpack://_N_E/../ui-core/src/sensors/makeSensorKey.tsx","webpack://_N_E/../ui-core/src/automation/AutomationsTable.tsx","webpack://_N_E/../ui-core/src/instigation/filterPermissionedInstigationState.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useDefinitionTagFilter.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useInstigationStatusFilter.tsx","webpack://_N_E/../ui-core/src/automation/MergedAutomationRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/automation/css/LatestTickHoverButton.module.css?fdcd","webpack://_N_E/../ui-core/src/automation/AutomationTabs.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx"],"sourcesContent":["import {useCallback, useContext, useMemo} from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\nimport {StaticBaseConfig, useStaticSetFilter} from '../BaseFilters/useStaticSetFilter';\n\ntype Props =\n  | {\n      codeLocations: RepoAddress[];\n      setCodeLocations: (repos: RepoAddress[]) => void;\n    }\n  | {\n      codeLocations: undefined;\n      setCodeLocations: undefined;\n    };\n\n/**\n * If props are passed that this filter is in \"controlled mode\" (you tell it what the current state is)\n *\n * Otherwise it's uncontrolled and uses WorkspaceContext to control the current state\n * This means that any logic depending on the state of this filter would need to read\n * WorkspaceContext to get the current state.\n */\nexport const useCodeLocationFilter = (\n  {codeLocations, setCodeLocations}: Props = {\n    codeLocations: undefined,\n    setCodeLocations: undefined,\n  },\n) => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = useContext(WorkspaceContext);\n\n  const allRepoAddresses = useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  const setVisibleRepos = useCallback(\n    (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    [allRepoAddresses, setHidden, setVisible],\n  );\n\n  return useStaticSetFilter<RepoAddress>({\n    state: codeLocations ? codeLocations : visibleRepoAddresses,\n    allValues: useMemo(\n      () =>\n        allRepoAddresses.map((repoAddress) => {\n          return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n        }),\n      [allRepoAddresses],\n    ),\n    onStateChanged: (state) => {\n      if (setCodeLocations) {\n        setCodeLocations(Array.from(state));\n      } else {\n        setVisibleRepos(state);\n      }\n    },\n    menuWidth: '500px',\n    ...BaseConfig,\n  });\n};\n\nconst getStringValue = (value: RepoAddress) => repoAddressAsHumanString(value);\n\nexport const BaseConfig: StaticBaseConfig<RepoAddress> = {\n  name: 'Code location',\n  icon: 'folder',\n  renderLabel: ({value}: {value: RepoAddress}) => (\n    <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n  ),\n  getStringValue,\n  getKey: getStringValue,\n};\n","import {useReducer} from 'react';\n\nexport type OpenWithIntent = 'not-open' | 'start' | 'stop';\n\ntype CompletionState = {completed: number; errors: {[id: string]: string}};\n\ntype DialogState = {\n  step: 'initial' | 'updating' | 'completed';\n  completion: CompletionState;\n};\n\ntype DialogAction =\n  | {type: 'reset'}\n  | {type: 'start'}\n  | {type: 'update-success'}\n  | {type: 'update-error'; name: string; error: string}\n  | {type: 'complete'};\n\nconst initialState: DialogState = {\n  step: 'initial',\n  completion: {completed: 0, errors: {}},\n};\n\nconst reducer = (prevState: DialogState, action: DialogAction): DialogState => {\n  switch (action.type) {\n    case 'reset':\n      return initialState;\n    case 'start':\n      return {...prevState, step: 'updating'};\n    case 'update-success': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {...completion, completed: completion.completed + 1},\n      };\n    }\n    case 'update-error': {\n      const {completion} = prevState;\n      return {\n        step: 'updating',\n        completion: {\n          ...completion,\n          completed: completion.completed + 1,\n          errors: {...completion.errors, [action.name]: action.error},\n        },\n      };\n    }\n    case 'complete':\n      return {...prevState, step: 'completed'};\n  }\n};\n\nexport const useInstigationStateReducer = () => useReducer(reducer, initialState);\n","// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {useMutation} from '../apollo-client';\nimport {assertUnreachable} from '../app/Util';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from '../schedules/ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {RepoAddress} from '../workspace/types';\n\nexport interface AutomationInfo {\n  repoAddress: RepoAddress;\n  name: string;\n  type: 'sensor' | 'schedule';\n  instigationState: BasicInstigationStateFragment;\n}\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  automations: AutomationInfo[];\n}\n\nexport const AutomationStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, automations} = props;\n  const count = automations.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (automation: AutomationInfo) => {\n    const {repoAddress, name, type} = automation;\n    const repoValues = {\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    };\n\n    switch (type) {\n      case 'sensor': {\n        const {data} = await startSensor({\n          variables: {sensorSelector: {...repoValues, sensorName: name}},\n        });\n\n        switch (data?.startSensor.__typename) {\n          case 'Sensor':\n            dispatch({type: 'update-success'});\n            return;\n          case 'SensorNotFoundError':\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.startSensor.message,\n            });\n        }\n\n        break;\n      }\n\n      case 'schedule': {\n        const {data} = await startSchedule({\n          variables: {scheduleSelector: {...repoValues, scheduleName: name}},\n        });\n\n        switch (data?.startSchedule.__typename) {\n          case 'ScheduleStateResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.startSchedule.message,\n            });\n        }\n\n        break;\n      }\n\n      default:\n        assertUnreachable(type);\n    }\n  };\n\n  const stop = async (automation: AutomationInfo) => {\n    const {name, type, instigationState} = automation;\n    const variables = {id: instigationState.id};\n\n    switch (type) {\n      case 'sensor': {\n        const {data} = await stopSensor({variables});\n        switch (data?.stopSensor.__typename) {\n          case 'StopSensorMutationResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.stopSensor.message,\n            });\n        }\n        break;\n      }\n\n      case 'schedule': {\n        const {data} = await stopSchedule({variables});\n        switch (data?.stopRunningSchedule.__typename) {\n          case 'ScheduleStateResult':\n            dispatch({type: 'update-success'});\n            return;\n          case 'UnauthorizedError':\n          case 'PythonError':\n            dispatch({\n              type: 'update-error',\n              name,\n              error: data.stopRunningSchedule.message,\n            });\n        }\n        break;\n      }\n\n      default:\n        assertUnreachable(type);\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const automation of automations) {\n      if (openWithIntent === 'start') {\n        await start(automation);\n      } else {\n        await stop(automation);\n      }\n    }\n\n    dispatch({type: 'complete'});\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${\n                count === 1 ? '1 automation' : `${count} automations`\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${\n              count === 1 ? '1 automation' : `${count} automations`\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Automations are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 automation' : `${count} automations`}`\n            : `Stop ${count === 1 ? '1 automation' : `${count} automations`}`;\n        return (\n          <>\n            <Button onClick={onClose}>Cancel</Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 automation' : `${count} automations`}`\n            : `Stopping ${count === 1 ? '1 automation' : `${count} automations`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while automations are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 automation' : `${successCount} automations`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 automation' : `${successCount} automations`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 automation' : `${errorCount} automations`\n                    }:`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 automation' : `${errorCount} automations`\n                    }:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((automationName) => (\n                <li key={automationName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{automationName}:</strong>\n                    {errors[automationName] ? <div>{errors[automationName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start automations' : 'Stop automations'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const instigationStateSummary = (instigationStates: BasicInstigationStateFragment[]) => {\n  let anyOff = false;\n  let anyOn = false;\n\n  for (const state of instigationStates) {\n    const {status} = state;\n    if (status === InstigationStatus.RUNNING) {\n      anyOn = true;\n    } else if (status === InstigationStatus.STOPPED) {\n      anyOff = true;\n    }\n    if (anyOn && anyOff) {\n      break;\n    }\n  }\n\n  return {anyOff, anyOn};\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {AutomationInfo, AutomationStateChangeDialog} from './AutomationStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  automations: AutomationInfo[];\n}\n\nexport const AutomationBulkActionMenu = (props: Props) => {\n  const {automations} = props;\n  const count = automations.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(automations.map(({instigationState}) => instigationState));\n  }, [automations]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 automation' : `${count} automations`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 automation' : `${count} automations`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <AutomationStateChangeDialog\n        openWithIntent={openWithIntent}\n        automations={automations}\n        onClose={() => setOpenWithIntent('not-open')}\n      />\n    </>\n  );\n};\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  HoverButton,\n  Icon,\n  Popover,\n  Spinner,\n} from '@dagster-io/ui-components';\nimport {ReactNode, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {TickTagFragment} from '../instigation/types/InstigationTick.types';\nimport {numberFormatter} from '../ui/formatters';\nimport styles from './css/LatestTickHoverButton.module.css';\n\ninterface Props {\n  tick: TickTagFragment | null;\n}\n\nexport const LatestTickHoverButton = ({tick}: Props) => {\n  const [showErrors, setShowErrors] = useState(false);\n\n  const content = () => {\n    if (!tick) {\n      return (\n        <Box padding={{vertical: 8, horizontal: 12}}>\n          <Caption>No ticks yet</Caption>\n        </Box>\n      );\n    }\n\n    const icon = statusToIcon[tick.status];\n    const timestamp = <Timestamp timestamp={{unix: tick.timestamp}} />;\n\n    switch (tick.status) {\n      case InstigationTickStatus.FAILURE:\n        return (\n          <HoverContent\n            icon={icon}\n            title=\"Latest tick failed\"\n            timestamp={timestamp}\n            content={\n              <div>\n                {tick.error ? (\n                  <ButtonLink onClick={() => setShowErrors(true)}>Show error</ButtonLink>\n                ) : (\n                  'Unknown error'\n                )}\n              </div>\n            }\n          />\n        );\n      case InstigationTickStatus.SUCCESS: {\n        const runCount = tick.runIds.length;\n        return (\n          <HoverContent\n            icon={icon}\n            title=\"Latest tick succeeded\"\n            timestamp={timestamp}\n            content={\n              <div>\n                {runCount === 1\n                  ? '1 run requested'\n                  : `${numberFormatter.format(runCount)} runs requested`}\n              </div>\n            }\n          />\n        );\n      }\n      case InstigationTickStatus.STARTED:\n        return <HoverContent icon={icon} title=\"Evaluating tick\" timestamp={timestamp} />;\n      case InstigationTickStatus.SKIPPED:\n      default:\n        return (\n          <HoverContent\n            icon={icon}\n            title=\"Latest tick skipped\"\n            timestamp={timestamp}\n            content={<Caption>{tick.skipReason ?? 'No reason provided'}</Caption>}\n          />\n        );\n    }\n  };\n\n  return (\n    <>\n      <Popover content={content()} placement=\"top\" interactionKind=\"hover\">\n        <HoverButton>\n          {tick ? statusToIcon[tick.status] : <Icon name=\"missing\" color={Colors.accentGray()} />}\n        </HoverButton>\n      </Popover>\n      {tick?.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Done\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n\nconst statusToIcon: Record<InstigationTickStatus, ReactNode> = {\n  [InstigationTickStatus.FAILURE]: <Icon name=\"warning\" color={Colors.accentYellow()} />,\n  [InstigationTickStatus.SUCCESS]: <Icon name=\"done\" color={Colors.accentGreen()} />,\n  [InstigationTickStatus.STARTED]: <Spinner purpose=\"body-text\" />,\n  [InstigationTickStatus.SKIPPED]: <Icon name=\"status\" color={Colors.accentGray()} />,\n};\n\ninterface HoverContentProps {\n  icon: ReactNode;\n  title: ReactNode;\n  timestamp: ReactNode;\n  content?: ReactNode;\n}\n\nconst HoverContent = ({icon, title, timestamp, content}: HoverContentProps) => {\n  return (\n    <Box padding={12} className={styles.hoverContent}>\n      <Box\n        border={content ? 'bottom' : undefined}\n        padding={content ? {bottom: 12} : undefined}\n        margin={content ? {bottom: 8} : undefined}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          gap: 8,\n          justifyContent: 'space-between',\n        }}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          {icon}\n          <div>{title}</div>\n        </Box>\n        <div>{timestamp}</div>\n      </Box>\n      {content ? <div>{content}</div> : null}\n    </Box>\n  );\n};\n","export const hourOffsetFromUTC = (timeZone: string) => {\n  const formatForTimezone = Intl.DateTimeFormat(navigator.language, {\n    timeZone,\n    timeZoneName: 'shortOffset',\n  });\n  const offset = formatForTimezone\n    .formatToParts(new Date())\n    .find((part) => part.type === 'timeZoneName')?.value;\n\n  const withoutGMT = offset?.replace('GMT', '');\n  if (!withoutGMT) {\n    return 0;\n  }\n\n  const [hours = '0', minutes = '0'] = withoutGMT.split(':');\n  const parsedHours = parseInt(hours, 10);\n  const parsedMinutes = (parseInt(minutes, 10) / 60) * (parsedHours < 0 ? -1 : 1);\n  return parsedHours + parsedMinutes;\n};\n","import {CaptionMono, MetadataTable, Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\nimport styled from 'styled-components';\n\nimport {hourOffsetFromUTC} from './hourOffsetFromUTC';\nimport {humanCronString} from './humanCronString';\nimport {TimeContext} from '../app/time/TimeContext';\nimport {browserTimezone} from '../app/time/browserTimezone';\n\ninterface Props {\n  cronSchedule: string;\n  executionTimezone: string | null;\n}\n\nexport const CronTag = (props: Props) => {\n  const {cronSchedule, executionTimezone} = props;\n  const {withHumanTimezone, withExecutionTimezone} = useCronInformation(\n    cronSchedule,\n    executionTimezone,\n  );\n\n  const tooltipContent = (\n    <MetadataTable\n      rows={[\n        {key: 'Cron value', value: <CaptionMono>{cronSchedule}</CaptionMono>},\n        {key: 'Your time', value: <span>{withHumanTimezone}</span>},\n      ]}\n    />\n  );\n\n  return (\n    <Container>\n      <Tooltip content={tooltipContent} placement=\"top\">\n        <Tag icon=\"schedule\">{withExecutionTimezone}</Tag>\n      </Tooltip>\n    </Container>\n  );\n};\n\nexport const useCronInformation = (\n  cronSchedule: string | null,\n  executionTimezone: string | null,\n) => {\n  const {\n    timezone: [storedTimezone],\n  } = useContext(TimeContext);\n\n  if (!cronSchedule) {\n    return {\n      withHumanTimezone: null,\n      withExecutionTimezone: null,\n    };\n  }\n\n  const longTimezoneName = executionTimezone || 'UTC';\n  const humanStringWithExecutionTimezone = humanCronString(cronSchedule, {longTimezoneName});\n  const userTimezone = storedTimezone === 'Automatic' ? browserTimezone() : storedTimezone;\n\n  const userTimezoneOffset = hourOffsetFromUTC(userTimezone);\n  const executionTimezoneOffset = hourOffsetFromUTC(longTimezoneName);\n  const tzOffset = userTimezoneOffset - executionTimezoneOffset;\n\n  const humanStringWithUserTimezone = humanCronString(cronSchedule, {\n    longTimezoneName: userTimezone,\n    tzOffset,\n  });\n\n  return {\n    withHumanTimezone: humanStringWithUserTimezone,\n    withExecutionTimezone: humanStringWithExecutionTimezone,\n  };\n};\n\nconst Container = styled.div`\n  .bp5-popover-target {\n    max-width: 100%;\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n","import {Box, Popover, Tag} from '@dagster-io/ui-components';\n\nimport {InstigationStatus} from '../graphql/types';\n\nexport const errorDisplay = (status: InstigationStatus, runningScheduleCount: number) => {\n  if (status === InstigationStatus.STOPPED && runningScheduleCount === 0) {\n    return null;\n  } else if (status === InstigationStatus.RUNNING && runningScheduleCount === 1) {\n    return null;\n  }\n\n  const errors = [];\n  if (status === InstigationStatus.RUNNING && runningScheduleCount === 0) {\n    errors.push(\n      'Schedule is set to be running, but either the scheduler is not configured or the scheduler is not running the schedule',\n    );\n  } else if (status === InstigationStatus.STOPPED && runningScheduleCount > 0) {\n    errors.push('Schedule is set to be stopped, but the scheduler is still running the schedule');\n  }\n\n  if (runningScheduleCount > 0) {\n    errors.push('Duplicate cron job for schedule found.');\n  }\n\n  return (\n    <Popover\n      interactionKind=\"hover\"\n      popoverClassName=\"bp5-popover-content-sizing\"\n      position=\"right\"\n      content={\n        <Box flex={{direction: 'column', gap: 8}} padding={12}>\n          <strong>There are errors with this schedule.</strong>\n          <div>Errors:</div>\n          <ul>\n            {errors.map((error, index) => (\n              <li key={index}>{error}</li>\n            ))}\n          </ul>\n        </Box>\n      }\n    >\n      <Tag fill interactive intent=\"danger\">\n        Error\n      </Tag>\n    </Popover>\n  );\n};\n","import {\n  Box,\n  Button,\n  Caption,\n  Checkbox,\n  Colors,\n  Icon,\n  Menu,\n  MiddleTruncate,\n  Popover,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {isThisThingAJob, useRepository} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from './types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {CronTag} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitchFragment';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {MenuLink} from '../ui/MenuLink';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.2fr 1fr 1fr 76px 148px 210px 92px';\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = `60px ${TEMPLATE_COLUMNS}`;\n\ninterface ScheduleRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  scheduleState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedScheduleRow = (props: ScheduleRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    scheduleState,\n    start,\n    height,\n  } = props;\n\n  const repo = useRepository(repoAddress);\n\n  // Wait 100ms before querying in case we're scrolling the table really fast\n  const shouldQuery = useDelayedState(100);\n\n  const scheduleQueryResult = useQuery<SingleScheduleQuery, SingleScheduleQueryVariables>(\n    SINGLE_SCHEDULE_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      notifyOnNetworkStatusChange: true,\n      skip: !shouldQuery,\n    },\n  );\n\n  const scheduleAssetSelectionQueryResult = useQuery<\n    ScheduleAssetSelectionQuery,\n    ScheduleAssetSelectionQueryVariables\n  >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n    variables: {\n      scheduleSelector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        scheduleName: name,\n      },\n    },\n    skip: !shouldQuery,\n  });\n\n  useQueryRefreshAtInterval(scheduleQueryResult, FIFTEEN_SECONDS);\n  useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = scheduleQueryResult;\n\n  const scheduleData = React.useMemo(() => {\n    if (data?.scheduleOrError.__typename !== 'Schedule') {\n      return null;\n    }\n\n    return data.scheduleOrError;\n  }, [data]);\n\n  const isJob = !!(scheduleData && isThisThingAJob(repo, scheduleData.pipelineName));\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = scheduleState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this schedule'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this schedule'};\n    }\n    return {disabled: false};\n  }, [scheduleState]);\n\n  const tick = scheduleData?.scheduleState.ticks[0];\n  const targets = scheduleData?.pipelineName ? [{pipelineName: scheduleData.pipelineName}] : null;\n  const assetSelection =\n    scheduleAssetSelectionQueryResult.data?.scheduleOrError.__typename === 'Schedule'\n      ? scheduleAssetSelectionQueryResult.data.scheduleOrError.assetSelection\n      : null;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <span style={{fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </span>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              <CronTag\n                cronSchedule={scheduleData.cronSchedule}\n                executionTimezone={scheduleData.executionTimezone}\n              />\n              {scheduleData.scheduleState.nextTick &&\n              scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                <Caption>\n                  <div\n                    style={{\n                      overflow: 'hidden',\n                      whiteSpace: 'nowrap',\n                      maxWidth: '100%',\n                      textOverflow: 'ellipsis',\n                    }}\n                  >\n                    Next tick:&nbsp;\n                    <TimestampDisplay\n                      timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                      timezone={scheduleData.executionTimezone}\n                      timeFormat={{showSeconds: false, showTimezone: true}}\n                    />\n                  </div>\n                </Caption>\n              ) : null}\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <div>\n            <AutomationTargetList\n              repoAddress={repoAddress}\n              automationType=\"schedule\"\n              targets={targets}\n              assetSelection={assetSelection}\n            />\n          </div>\n        </RowCell>\n        <RowCell>\n          {scheduleData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n              {errorDisplay(\n                scheduleData.scheduleState.status,\n                scheduleData.scheduleState.runningCount,\n              )}\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} tickResultType=\"runs\" />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n            <LastRunSummary\n              run={scheduleData.scheduleState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={scheduleQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {scheduleData?.partitionSet ? (\n            <Popover\n              content={\n                <Menu>\n                  <MenuLink\n                    text=\"View partition history\"\n                    icon=\"dynamic_feed\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                  <MenuLink\n                    text=\"Launch partition backfill\"\n                    icon=\"add_circle\"\n                    target=\"_blank\"\n                    to={workspacePathFromAddress(\n                      repoAddress,\n                      `/${isJob ? 'jobs' : 'pipelines'}/${scheduleData.pipelineName}/partitions`,\n                    )}\n                  />\n                </Menu>\n              }\n              position=\"bottom-left\"\n            >\n              <Button icon={<Icon name=\"expand_more\" />} />\n            </Popover>\n          ) : (\n            <span style={{color: Colors.textLight()}}>{'\\u2013'}</span>\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedScheduleHeader = (props: {checkbox: React.ReactNode}) => {\n  const {checkbox} = props;\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Schedule name</HeaderCell>\n      <HeaderCell>Schedule</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n      <HeaderCell>Actions</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SINGLE_SCHEDULE_QUERY = gql`\n  query SingleScheduleQuery($selector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $selector) {\n      ... on Schedule {\n        id\n        name\n        pipelineName\n        description\n        scheduleState {\n          id\n          runningCount\n          hasStartPermission\n          hasStopPermission\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        partitionSet {\n          id\n          name\n        }\n        ...ScheduleSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n`;\n","import {\n  Box,\n  Caption,\n  CaptionMono,\n  Checkbox,\n  Colors,\n  HorizontalControls,\n  HoverButton,\n  Icon,\n  ListItem,\n  MetadataTable,\n  Popover,\n  Skeleton,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {ForwardedRef, forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LatestTickHoverButton} from './LatestTickHoverButton';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {useCronInformation} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TimeFromNow} from '../ui/TimeFromNow';\nimport {SINGLE_SCHEDULE_QUERY} from '../workspace/VirtualizedScheduleRow';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from '../workspace/types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface ScheduleRowProps {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const ObserveAutomationScheduleRow = forwardRef(\n  (props: ScheduleRowProps, ref: ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const queryResult = useQuery<SingleScheduleQuery, SingleScheduleQueryVariables>(\n      SINGLE_SCHEDULE_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            scheduleName: name,\n          },\n        },\n        skip: !shouldQuery,\n        notifyOnNetworkStatusChange: true,\n      },\n    );\n\n    const scheduleAssetSelectionQueryResult = useQuery<\n      ScheduleAssetSelectionQuery,\n      ScheduleAssetSelectionQueryVariables\n    >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        scheduleSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n\n    const scheduleData = useMemo(() => {\n      if (data?.scheduleOrError.__typename !== 'Schedule') {\n        return null;\n      }\n\n      return data.scheduleOrError;\n    }, [data]);\n\n    const tick = scheduleData?.scheduleState.ticks[0];\n\n    const {withHumanTimezone, withExecutionTimezone} = useCronInformation(\n      scheduleData?.cronSchedule ?? null,\n      scheduleData?.executionTimezone ?? null,\n    );\n\n    const right = () => {\n      if (queryResult.loading && !queryResult.data) {\n        return <Skeleton $width={200} $height={24} />;\n      }\n\n      const latestRuns = scheduleData?.scheduleState.runs || [];\n\n      return (\n        <HorizontalControls\n          controls={[\n            {\n              key: 'latest-run',\n              control: latestRuns[0]?.startTime ? (\n                <Popover\n                  key={latestRuns[0].id}\n                  position=\"top\"\n                  interactionKind=\"hover\"\n                  content={\n                    <div>\n                      <RunStatusOverlay run={latestRuns[0]} name={name} />\n                    </div>\n                  }\n                  hoverOpenDelay={100}\n                >\n                  <HoverButton>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      <RunStatusIndicator status={latestRuns[0].status} />\n                      <TimeFromNow unixTimestamp={latestRuns[0].startTime} showTooltip={false} />\n                    </Box>\n                  </HoverButton>\n                </Popover>\n              ) : null,\n            },\n            {\n              key: 'tick',\n              control: <LatestTickHoverButton tick={tick ?? null} />,\n            },\n            {\n              key: 'switch',\n              control: (\n                <Box flex={{direction: 'column', justifyContent: 'center'}} padding={{left: 8}}>\n                  {scheduleData ? (\n                    <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n                  ) : (\n                    <Checkbox key={name} disabled indeterminate checked={false} format=\"switch\" />\n                  )}\n                </Box>\n              ),\n            },\n          ]}\n        />\n      );\n    };\n\n    return (\n      <ListItem\n        ref={ref}\n        index={index}\n        href={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}\n        checked={checked}\n        onToggle={onToggleChecked}\n        renderLink={({href, ...props}) => <Link to={href || '#'} {...props} />}\n        left={\n          <Box flex={{direction: 'row', gap: 8, alignItems: 'flex-start'}}>\n            <div>\n              <Icon name=\"schedule\" />\n            </div>\n            <Box flex={{direction: 'column', gap: 4}}>\n              <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>{name}</Box>\n                {scheduleData?.description ? (\n                  <Tooltip\n                    content={<div style={{width: 320}}>{scheduleData.description}</div>}\n                    placement=\"top\"\n                  >\n                    <Icon name=\"info\" color={Colors.textLight()} />\n                  </Tooltip>\n                ) : null}\n              </Box>\n              {withHumanTimezone ? (\n                <Caption>\n                  Scheduled{' '}\n                  <Tooltip\n                    placement=\"top\"\n                    content={\n                      <MetadataTable\n                        rows={[\n                          {\n                            key: 'Cron value',\n                            value: <CaptionMono>{scheduleData?.cronSchedule ?? ''}</CaptionMono>,\n                          },\n                          {key: 'Your time', value: <span>{withHumanTimezone}</span>},\n                        ]}\n                      />\n                    }\n                  >\n                    <span>{withExecutionTimezone}</span>\n                  </Tooltip>\n                </Caption>\n              ) : (\n                <Skeleton $width={80} $height={16} />\n              )}\n            </Box>\n          </Box>\n        }\n        right={right()}\n      />\n    );\n  },\n);\n\nObserveAutomationScheduleRow.displayName = 'ObserveAutomationScheduleRow';\n","import {\n  Box,\n  Caption,\n  Checkbox,\n  Colors,\n  IconName,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {RepoAddress} from './types';\nimport {SingleSensorQuery, SingleSensorQueryVariables} from './types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {TICK_TAG_FRAGMENT} from '../instigation/InstigationTick';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {humanizeSensorInterval} from '../sensors/SensorDetails';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitchFragment';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 180px 1fr 76px 120px 148px 180px';\nconst TEMPLATE_COLUMNS_WITH_CHECKBOX = `60px ${TEMPLATE_COLUMNS}`;\n\ninterface SensorRowProps {\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n  showCheckboxColumn: boolean;\n  sensorState: BasicInstigationStateFragment;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedSensorRow = (props: SensorRowProps) => {\n  const {\n    name,\n    repoAddress,\n    checked,\n    onToggleChecked,\n    showCheckboxColumn,\n    sensorState,\n    start,\n    height,\n  } = props;\n\n  // Wait 100ms before querying in case we're scrolling the table really fast\n  const shouldQuery = useDelayedState(100);\n\n  const sensorQueryResult = useQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n    SINGLE_SENSOR_QUERY,\n    {\n      variables: {\n        selector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n      skip: !shouldQuery,\n    },\n  );\n\n  const sensorAssetSelectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {\n      sensorSelector: {\n        repositoryName: repoAddress.name,\n        repositoryLocationName: repoAddress.location,\n        sensorName: name,\n      },\n    },\n    skip: !shouldQuery,\n  });\n\n  useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n  useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n  const {data} = sensorQueryResult;\n\n  const sensorData = React.useMemo(() => {\n    if (data?.sensorOrError.__typename !== 'Sensor') {\n      return null;\n    }\n\n    return data.sensorOrError;\n  }, [data]);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (onToggleChecked && e.target instanceof HTMLInputElement) {\n      const {checked} = e.target;\n      const shiftKey =\n        e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n      onToggleChecked({checked, shiftKey});\n    }\n  };\n\n  const checkboxState = React.useMemo(() => {\n    const {hasStartPermission, hasStopPermission, status} = sensorState;\n    if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n      return {disabled: true, message: 'You do not have permission to stop this sensor'};\n    }\n    if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n      return {disabled: true, message: 'You do not have permission to start this sensor'};\n    }\n    return {disabled: false};\n  }, [sensorState]);\n\n  const tick = sensorData?.sensorState.ticks[0];\n\n  const sensorType = sensorData?.sensorType;\n  const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n\n  const selectedAssets =\n    sensorAssetSelectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n      ? sensorAssetSelectionQueryResult.data.sensorOrError.assetSelection\n      : null;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\" $showCheckboxColumn={showCheckboxColumn}>\n        {showCheckboxColumn ? (\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n        ) : null}\n        <RowCell>\n          <Box flex={{direction: 'column', gap: 4}}>\n            <span style={{fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </span>\n            <div\n              style={{\n                maxWidth: '100%',\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n              }}\n            >\n              <Caption\n                style={{\n                  color: Colors.textLight(),\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {sensorData?.description}\n              </Caption>\n            </div>\n          </Box>\n        </RowCell>\n        <RowCell>\n          <div>\n            {sensorInfo ? (\n              sensorInfo.description ? (\n                <Tooltip content={sensorInfo.description}>\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                </Tooltip>\n              ) : (\n                <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n              )\n            ) : null}\n          </div>\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div>\n              <AutomationTargetList\n                targets={sensorData.targets}\n                repoAddress={repoAddress}\n                assetSelection={selectedAssets}\n                automationType={sensorData.sensorType}\n              />\n            </div>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <Box flex={{direction: 'column', gap: 4}}>\n              {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n              <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n            </Box>\n          ) : null}\n        </RowCell>\n        <RowCell>\n          {sensorData ? (\n            <div style={{color: Colors.textDefault()}}>\n              {humanizeSensorInterval(sensorData.minIntervalSeconds)}\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {tick ? (\n            <div>\n              <TickStatusTag tick={tick} tickResultType=\"runs\" />\n            </div>\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n            <LastRunSummary\n              run={sensorData.sensorState.runs[0]}\n              name={name}\n              showButton={false}\n              showHover\n              showSummary={false}\n            />\n          ) : (\n            <LoadingOrNone queryResult={sensorQueryResult} />\n          )}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedSensorHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow\n      templateColumns={checkbox ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS}\n      sticky\n    >\n      {checkbox ? (\n        <HeaderCell>\n          <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n        </HeaderCell>\n      ) : null}\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Running</HeaderCell>\n      <HeaderCell>Frequency</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)<{$showCheckboxColumn: boolean}>`\n  display: grid;\n  grid-template-columns: ${({$showCheckboxColumn}) =>\n    $showCheckboxColumn ? TEMPLATE_COLUMNS_WITH_CHECKBOX : TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nexport const SENSOR_TYPE_META: Record<\n  SensorType,\n  {name: string; icon: IconName; description: string | null}\n> = {\n  [SensorType.ASSET]: {\n    name: 'Asset sensor',\n    icon: 'sensors',\n    description: 'Asset sensors instigate runs when a materialization occurs',\n  },\n  [SensorType.AUTO_MATERIALIZE]: {\n    name: 'Automation condition sensor',\n    icon: 'automation_condition',\n    description:\n      'Automation condition sensors trigger runs based on conditions defined on assets or checks.',\n  },\n  [SensorType.AUTOMATION]: {\n    name: 'Automation condition sensor',\n    icon: 'automation_condition',\n    description:\n      'Automation condition sensors trigger runs based on conditions defined on assets or checks.',\n  },\n  [SensorType.FRESHNESS_POLICY]: {\n    name: 'Freshness policy sensor',\n    icon: 'sensors',\n    description:\n      'Freshness sensors check the freshness of assets on each tick, then perform an action in response to that status',\n  },\n  [SensorType.MULTI_ASSET]: {\n    name: 'Multi-asset sensor',\n    icon: 'sensors',\n    description:\n      'Multi asset sensors trigger job executions based on multiple asset materialization event streams',\n  },\n  [SensorType.RUN_STATUS]: {\n    name: 'Run status sensor',\n    icon: 'sensors',\n    description: 'Run status sensors react to run status',\n  },\n  [SensorType.STANDARD]: {\n    name: 'Standard sensor',\n    icon: 'sensors',\n    description: null,\n  },\n  [SensorType.UNKNOWN]: {\n    name: 'Standard sensor',\n    icon: 'sensors',\n    description: null,\n  },\n};\n\nexport const SINGLE_SENSOR_QUERY = gql`\n  query SingleSensorQuery($selector: SensorSelector!) {\n    sensorOrError(sensorSelector: $selector) {\n      ... on Sensor {\n        id\n        description\n        name\n        targets {\n          pipelineName\n        }\n        metadata {\n          assetKeys {\n            path\n          }\n        }\n        minIntervalSeconds\n        description\n        sensorState {\n          id\n          runningCount\n          hasStartPermission\n          hasStopPermission\n          ticks(limit: 1) {\n            id\n            ...TickTagFragment\n          }\n          runs(limit: 1) {\n            id\n            ...RunTimeFragment\n          }\n          nextTick {\n            timestamp\n          }\n        }\n        ...SensorSwitchFragment\n      }\n    }\n  }\n\n  ${TICK_TAG_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {\n  Box,\n  Caption,\n  Checkbox,\n  Colors,\n  HorizontalControls,\n  HoverButton,\n  Icon,\n  ListItem,\n  Popover,\n  Skeleton,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {ForwardedRef, forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {LatestTickHoverButton} from './LatestTickHoverButton';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {SensorType} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TimeFromNow} from '../ui/TimeFromNow';\nimport {SENSOR_TYPE_META, SINGLE_SENSOR_QUERY} from '../workspace/VirtualizedSensorRow';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleSensorQuery,\n  SingleSensorQueryVariables,\n} from '../workspace/types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const ObserveAutomationSensorRow = forwardRef(\n  (props: Props, ref: ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const sensorQueryResult = useQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n      SINGLE_SENSOR_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            sensorName: name,\n          },\n        },\n        skip: !shouldQuery,\n      },\n    );\n\n    const sensorAssetSelectionQueryResult = useQuery<\n      SensorAssetSelectionQuery,\n      SensorAssetSelectionQueryVariables\n    >(SENSOR_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        sensorSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = sensorQueryResult;\n\n    const sensorData = useMemo(() => {\n      if (data?.sensorOrError.__typename !== 'Sensor') {\n        return null;\n      }\n\n      return data.sensorOrError;\n    }, [data]);\n\n    const tick = sensorData?.sensorState.ticks[0];\n\n    const sensorType = sensorData?.sensorType;\n    const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n\n    const right = () => {\n      if (sensorQueryResult.loading && !sensorQueryResult.data) {\n        return <Skeleton $width={200} $height={24} />;\n      }\n\n      const latestRuns = sensorData?.sensorState.runs || [];\n\n      return (\n        <HorizontalControls\n          controls={[\n            {\n              key: 'latest-run',\n              control: latestRuns[0]?.startTime ? (\n                <Popover\n                  key={latestRuns[0].id}\n                  position=\"top\"\n                  interactionKind=\"hover\"\n                  content={\n                    <div>\n                      <RunStatusOverlay run={latestRuns[0]} name={name} />\n                    </div>\n                  }\n                  hoverOpenDelay={100}\n                >\n                  <HoverButton>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      <RunStatusIndicator status={latestRuns[0].status} />\n                      <TimeFromNow unixTimestamp={latestRuns[0].startTime} showTooltip={false} />\n                    </Box>\n                  </HoverButton>\n                </Popover>\n              ) : null,\n            },\n            {\n              key: 'tick',\n              control: <LatestTickHoverButton tick={tick ?? null} />,\n            },\n            {\n              key: 'switch',\n              control: (\n                <Box flex={{direction: 'column', justifyContent: 'center'}} padding={{left: 8}}>\n                  {sensorData ? (\n                    <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n                  ) : (\n                    <Checkbox key={name} disabled indeterminate checked={false} format=\"switch\" />\n                  )}\n                </Box>\n              ),\n            },\n          ]}\n        />\n      );\n    };\n\n    return (\n      <ListItem\n        ref={ref}\n        index={index}\n        href={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}\n        checked={checked}\n        onToggle={onToggleChecked}\n        renderLink={({href, ...props}) => <Link to={href || '#'} {...props} />}\n        left={\n          <Box flex={{direction: 'row', gap: 8, alignItems: 'flex-start'}}>\n            <div>\n              <Icon name=\"sensors\" />\n            </div>\n            <Box flex={{direction: 'column', gap: 4}}>\n              <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                {name}\n                {sensorInfo?.description ? (\n                  <Tooltip\n                    content={<div style={{width: 320}}>{sensorInfo.description}</div>}\n                    placement=\"top\"\n                  >\n                    <Icon name=\"info\" color={Colors.textLight()} />\n                  </Tooltip>\n                ) : null}\n              </Box>\n              <Caption>\n                {sensorData?.sensorType ? (\n                  sensorTypeToLabel[sensorData.sensorType]\n                ) : (\n                  <Skeleton $width={80} $height={16} />\n                )}\n              </Caption>\n            </Box>\n          </Box>\n        }\n        right={right()}\n      />\n    );\n  },\n);\n\nObserveAutomationSensorRow.displayName = 'ObserveAutomationSensorRow';\n\nconst sensorTypeToLabel: Record<SensorType, string> = {\n  [SensorType.ASSET]: 'Asset sensor',\n  [SensorType.AUTOMATION]: 'Automation condition sensor',\n  [SensorType.AUTO_MATERIALIZE]: 'Automation condition sensor',\n  [SensorType.FRESHNESS_POLICY]: 'Freshness policy sensor',\n  [SensorType.MULTI_ASSET]: 'Multi-asset sensor',\n  [SensorType.RUN_STATUS]: 'Run status sensor',\n  [SensorType.STANDARD]: 'Standard sensor',\n  [SensorType.UNKNOWN]: 'Unknown sensor type',\n};\n","import {Box} from '@dagster-io/ui-components';\nimport styled from 'styled-components';\n\nimport {HeaderCell, HeaderRow} from '../ui/VirtualizedTable';\n\nexport const TEMPLATE_COLUMNS = '60px minmax(400px, 1.5fr) 240px 1fr 200px 200px';\n\nexport const VirtualizedAutomationHeader = ({checkbox}: {checkbox: React.ReactNode}) => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>\n        <div style={{position: 'relative', top: '-1px'}}>{checkbox}</div>\n      </HeaderCell>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Type</HeaderCell>\n      <HeaderCell>Target</HeaderCell>\n      <HeaderCell>Last tick</HeaderCell>\n      <HeaderCell>Last run</HeaderCell>\n    </HeaderRow>\n  );\n};\n\nexport const AutomationRowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n","import {\n  Box,\n  Caption,\n  Checkbox,\n  MiddleTruncate,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AutomationTargetList} from './AutomationTargetList';\nimport {AutomationRowGrid} from './VirtualizedAutomationRow';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {CronTag} from '../schedules/CronTag';\nimport {SCHEDULE_ASSET_SELECTIONS_QUERY} from '../schedules/ScheduleAssetSelectionsQuery';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {errorDisplay} from '../schedules/SchedulesTable';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {\n  ScheduleAssetSelectionQuery,\n  ScheduleAssetSelectionQueryVariables,\n} from '../schedules/types/ScheduleAssetSelectionsQuery.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RowCell} from '../ui/VirtualizedTable';\nimport {SINGLE_SCHEDULE_QUERY} from '../workspace/VirtualizedScheduleRow';\nimport {LoadingOrNone} from '../workspace/VirtualizedWorkspaceTable';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleScheduleQuery,\n  SingleScheduleQueryVariables,\n} from '../workspace/types/VirtualizedScheduleRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface ScheduleRowProps {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const VirtualizedAutomationScheduleRow = forwardRef(\n  (props: ScheduleRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const queryResult = useQuery<SingleScheduleQuery, SingleScheduleQueryVariables>(\n      SINGLE_SCHEDULE_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            scheduleName: name,\n          },\n        },\n        skip: !shouldQuery,\n        notifyOnNetworkStatusChange: true,\n      },\n    );\n\n    const scheduleAssetSelectionQueryResult = useQuery<\n      ScheduleAssetSelectionQuery,\n      ScheduleAssetSelectionQueryVariables\n    >(SCHEDULE_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        scheduleSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          scheduleName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(scheduleAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n\n    const scheduleData = useMemo(() => {\n      if (data?.scheduleOrError.__typename !== 'Schedule') {\n        return null;\n      }\n\n      return data.scheduleOrError;\n    }, [data]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (onToggleChecked && e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const scheduleState = scheduleData?.scheduleState;\n\n    const checkboxState = useMemo(() => {\n      if (!scheduleState) {\n        return {disabled: true};\n      }\n\n      const {hasStartPermission, hasStopPermission, status} = scheduleState;\n      if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n        return {disabled: true, message: 'You do not have permission to stop this schedule'};\n      }\n      if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n        return {disabled: true, message: 'You do not have permission to start this schedule'};\n      }\n      return {disabled: false};\n    }, [scheduleState]);\n\n    const tick = scheduleData?.scheduleState.ticks[0];\n    const targets = scheduleData?.pipelineName ? [{pipelineName: scheduleData.pipelineName}] : null;\n    const assetSelection =\n      scheduleAssetSelectionQueryResult.data?.scheduleOrError.__typename === 'Schedule'\n        ? scheduleAssetSelectionQueryResult.data.scheduleOrError.assetSelection\n        : null;\n\n    return (\n      <div ref={ref} data-index={index}>\n        <AutomationRowGrid border=\"bottom\">\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n          <RowCell>\n            <Box\n              flex={{\n                direction: 'row',\n                gap: 8,\n                alignItems: 'flex-start',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Box flex={{grow: 1, gap: 8}}>\n                {scheduleData ? (\n                  <>\n                    <ScheduleSwitch key={name} repoAddress={repoAddress} schedule={scheduleData} />\n                    {errorDisplay(\n                      scheduleData.scheduleState.status,\n                      scheduleData.scheduleState.runningCount,\n                    )}\n                  </>\n                ) : (\n                  <div style={{width: 30}} />\n                )}\n                <Link to={workspacePathFromAddress(repoAddress, `/schedules/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </Box>\n            </Box>\n          </RowCell>\n          <RowCell>\n            {scheduleData ? (\n              <Box flex={{direction: 'column', gap: 4}}>\n                <CronTag\n                  cronSchedule={scheduleData.cronSchedule}\n                  executionTimezone={scheduleData.executionTimezone}\n                />\n                {scheduleData.scheduleState.nextTick &&\n                scheduleData.scheduleState.status === InstigationStatus.RUNNING ? (\n                  <Caption>\n                    <div\n                      style={{\n                        overflow: 'hidden',\n                        whiteSpace: 'nowrap',\n                        maxWidth: '100%',\n                        textOverflow: 'ellipsis',\n                      }}\n                    >\n                      Next tick:&nbsp;\n                      <TimestampDisplay\n                        timestamp={scheduleData.scheduleState.nextTick.timestamp!}\n                        timezone={scheduleData.executionTimezone}\n                        timeFormat={{showSeconds: false, showTimezone: true}}\n                      />\n                    </div>\n                  </Caption>\n                ) : null}\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            <div>\n              <AutomationTargetList\n                repoAddress={repoAddress}\n                automationType=\"schedule\"\n                targets={targets}\n                assetSelection={assetSelection}\n              />\n            </div>\n          </RowCell>\n          <RowCell>\n            {tick ? (\n              <div>\n                <TickStatusTag tick={tick} tickResultType=\"runs\" />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {scheduleData?.scheduleState && scheduleData?.scheduleState.runs[0] ? (\n              <LastRunSummary\n                run={scheduleData.scheduleState.runs[0]}\n                name={name}\n                showButton={false}\n                showHover\n                showSummary={false}\n              />\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n        </AutomationRowGrid>\n      </div>\n    );\n  },\n);\n","import {\n  Box,\n  Checkbox,\n  MiddleTruncate,\n  Tag,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {AutomationTargetList} from './AutomationTargetList';\nimport {AutomationRowGrid} from './VirtualizedAutomationRow';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {InstigationStatus} from '../graphql/types';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {SENSOR_ASSET_SELECTIONS_QUERY} from '../sensors/SensorRoot';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n} from '../sensors/types/SensorRoot.types';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RowCell} from '../ui/VirtualizedTable';\nimport {SENSOR_TYPE_META, SINGLE_SENSOR_QUERY} from '../workspace/VirtualizedSensorRow';\nimport {LoadingOrNone} from '../workspace/VirtualizedWorkspaceTable';\nimport {RepoAddress} from '../workspace/types';\nimport {\n  SingleSensorQuery,\n  SingleSensorQueryVariables,\n} from '../workspace/types/VirtualizedSensorRow.types';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ninterface Props {\n  index: number;\n  name: string;\n  repoAddress: RepoAddress;\n  checked: boolean;\n  onToggleChecked: (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\nexport const VirtualizedAutomationSensorRow = forwardRef(\n  (props: Props, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, repoAddress, checked, onToggleChecked} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n\n    const sensorQueryResult = useQuery<SingleSensorQuery, SingleSensorQueryVariables>(\n      SINGLE_SENSOR_QUERY,\n      {\n        variables: {\n          selector: {\n            repositoryName: repoAddress.name,\n            repositoryLocationName: repoAddress.location,\n            sensorName: name,\n          },\n        },\n        skip: !shouldQuery,\n      },\n    );\n\n    const sensorAssetSelectionQueryResult = useQuery<\n      SensorAssetSelectionQuery,\n      SensorAssetSelectionQueryVariables\n    >(SENSOR_ASSET_SELECTIONS_QUERY, {\n      variables: {\n        sensorSelector: {\n          repositoryName: repoAddress.name,\n          repositoryLocationName: repoAddress.location,\n          sensorName: name,\n        },\n      },\n      skip: !shouldQuery,\n    });\n\n    useQueryRefreshAtInterval(sensorQueryResult, FIFTEEN_SECONDS);\n    useQueryRefreshAtInterval(sensorAssetSelectionQueryResult, FIFTEEN_SECONDS);\n\n    const {data} = sensorQueryResult;\n\n    const sensorData = useMemo(() => {\n      if (data?.sensorOrError.__typename !== 'Sensor') {\n        return null;\n      }\n\n      return data.sensorOrError;\n    }, [data]);\n\n    const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n      if (onToggleChecked && e.target instanceof HTMLInputElement) {\n        const {checked} = e.target;\n        const shiftKey =\n          e.nativeEvent instanceof MouseEvent && e.nativeEvent.getModifierState('Shift');\n        onToggleChecked({checked, shiftKey});\n      }\n    };\n\n    const sensorState = sensorData?.sensorState;\n\n    const checkboxState = useMemo(() => {\n      if (!sensorState) {\n        return {disabled: true};\n      }\n\n      const {hasStartPermission, hasStopPermission, status} = sensorState;\n      if (status === InstigationStatus.RUNNING && !hasStopPermission) {\n        return {disabled: true, message: 'You do not have permission to stop this sensor'};\n      }\n      if (status === InstigationStatus.STOPPED && !hasStartPermission) {\n        return {disabled: true, message: 'You do not have permission to start this sensor'};\n      }\n      return {disabled: false};\n    }, [sensorState]);\n\n    const tick = sensorData?.sensorState.ticks[0];\n\n    const sensorType = sensorData?.sensorType;\n    const sensorInfo = sensorType ? SENSOR_TYPE_META[sensorType] : null;\n    const selectedAssets =\n      sensorAssetSelectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n        ? sensorAssetSelectionQueryResult.data.sensorOrError.assetSelection\n        : null;\n\n    return (\n      <div ref={ref} data-index={index}>\n        <AutomationRowGrid border=\"bottom\">\n          <RowCell>\n            <Tooltip\n              canShow={checkboxState.disabled}\n              content={checkboxState.message || ''}\n              placement=\"top\"\n            >\n              <Checkbox disabled={checkboxState.disabled} checked={checked} onChange={onChange} />\n            </Tooltip>\n          </RowCell>\n          <RowCell>\n            <Box\n              flex={{\n                direction: 'row',\n                gap: 8,\n                alignItems: 'flex-start',\n                justifyContent: 'space-between',\n              }}\n            >\n              <Box flex={{grow: 1, gap: 8}}>\n                {/* Keyed so that a new switch is always rendered, otherwise it's reused and animates on/off */}\n                {sensorData ? (\n                  <SensorSwitch key={name} repoAddress={repoAddress} sensor={sensorData} />\n                ) : (\n                  <div style={{width: 30}} />\n                )}\n                <Link to={workspacePathFromAddress(repoAddress, `/sensors/${name}`)}>\n                  <MiddleTruncate text={name} />\n                </Link>\n              </Box>\n            </Box>\n          </RowCell>\n          <RowCell>\n            <div>\n              {sensorInfo ? (\n                sensorInfo.description ? (\n                  <Tooltip\n                    content={<div style={{maxWidth: '300px'}}>{sensorInfo.description}</div>}\n                    placement=\"top\"\n                  >\n                    <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                  </Tooltip>\n                ) : (\n                  <Tag icon={sensorInfo.icon}>{sensorInfo.name}</Tag>\n                )\n              ) : null}\n            </div>\n          </RowCell>\n          <RowCell>\n            {sensorData ? (\n              <div>\n                <AutomationTargetList\n                  targets={sensorData.targets || null}\n                  repoAddress={repoAddress}\n                  assetSelection={selectedAssets}\n                  automationType={sensorData.sensorType}\n                />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={sensorAssetSelectionQueryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {tick ? (\n              <div>\n                <TickStatusTag tick={tick} tickResultType=\"runs\" />\n              </div>\n            ) : (\n              <LoadingOrNone queryResult={sensorQueryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {sensorData?.sensorState && sensorData?.sensorState.runs[0] ? (\n              <LastRunSummary\n                run={sensorData.sensorState.runs[0]}\n                name={name}\n                showButton={false}\n                showHover\n                showSummary={false}\n              />\n            ) : (\n              <LoadingOrNone queryResult={sensorQueryResult} />\n            )}\n          </RowCell>\n        </AutomationRowGrid>\n      </div>\n    );\n  },\n);\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\n// todo dish: Delete this in favor of `makeAutomationKey`, they're the same.\nexport const makeSensorKey = (repoAddress: RepoAddress, sensorName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${sensorName}`;\n};\n\nexport const makeAutomationKey = (repoAddress: RepoAddress, automationName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${automationName}`;\n};\n","import {Box, Row, Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {ObserveAutomationScheduleRow} from './ObserveAutomationScheduleRow';\nimport {ObserveAutomationSensorRow} from './ObserveAutomationSensorRow';\nimport {VirtualizedAutomationHeader} from './VirtualizedAutomationRow';\nimport {VirtualizedAutomationScheduleRow} from './VirtualizedAutomationScheduleRow';\nimport {VirtualizedAutomationSensorRow} from './VirtualizedAutomationSensorRow';\nimport {useFeatureFlags} from '../app/Flags';\nimport {COMMON_COLLATOR} from '../app/Util';\nimport {OVERVIEW_COLLAPSED_KEY} from '../overview/OverviewExpansionKey';\nimport {makeAutomationKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {DynamicRepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: string[];\n  sensors: string[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: string}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: string};\n\nexport const AutomationsTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const {flagUseNewObserveUIs} = useFeatureFlags();\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules, sensors}) => {\n      flat.push({\n        type: 'header',\n        repoAddress,\n        scheduleCount: schedules.length,\n        sensorCount: sensors.length,\n      });\n      const repoKey = repoAddressAsHumanString(repoAddress);\n\n      if (expandedKeys.includes(repoKey)) {\n        const sensorKeys = new Set(sensors);\n        const scheduleKeys = new Set(schedules);\n        const repoAutomations = [...sensors, ...schedules].sort((a, b) =>\n          COMMON_COLLATOR.compare(a, b),\n        );\n\n        repoAutomations.forEach((name) => {\n          if (sensorKeys.has(name)) {\n            flat.push({type: 'sensor', repoAddress, sensor: name});\n          } else if (scheduleKeys.has(name)) {\n            flat.push({type: 'schedule', repoAddress, schedule: name});\n          }\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 15,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        {flagUseNewObserveUIs ? null : <VirtualizedAutomationHeader checkbox={headerCheckbox} />}\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            if (type === 'header') {\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <DynamicRepoRow\n                    repoAddress={row.repoAddress}\n                    ref={rowVirtualizer.measureElement}\n                    index={index}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Box flex={{direction: 'row', gap: 4}}>\n                        <Tooltip\n                          content={\n                            row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`\n                          }\n                          placement=\"top\"\n                        >\n                          <Tag icon=\"sensors\">{row.sensorCount}</Tag>\n                        </Tooltip>\n                        <Tooltip\n                          content={\n                            row.scheduleCount === 1\n                              ? '1 schedule'\n                              : `${row.scheduleCount} schedules`\n                          }\n                          placement=\"top\"\n                        >\n                          <Tag icon=\"schedule\">{row.scheduleCount}</Tag>\n                        </Tooltip>\n                      </Box>\n                    }\n                  />\n                </Row>\n              );\n            }\n\n            if (type === 'sensor') {\n              const sensorKey = makeAutomationKey(row.repoAddress, row.sensor);\n              if (flagUseNewObserveUIs) {\n                return (\n                  <Row $height={size} $start={start} key={key}>\n                    <ObserveAutomationSensorRow\n                      key={key}\n                      index={index}\n                      ref={rowVirtualizer.measureElement}\n                      name={row.sensor}\n                      checked={checkedKeys.has(sensorKey)}\n                      onToggleChecked={onToggleCheckFactory(sensorKey)}\n                      repoAddress={row.repoAddress}\n                    />\n                  </Row>\n                );\n              }\n\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <VirtualizedAutomationSensorRow\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.sensor}\n                    checked={checkedKeys.has(sensorKey)}\n                    onToggleChecked={onToggleCheckFactory(sensorKey)}\n                    repoAddress={row.repoAddress}\n                  />\n                </Row>\n              );\n            }\n\n            if (type === 'schedule') {\n              const scheduleKey = makeAutomationKey(row.repoAddress, row.schedule);\n\n              if (flagUseNewObserveUIs) {\n                return (\n                  <Row $height={size} $start={start} key={key}>\n                    <ObserveAutomationScheduleRow\n                      key={key}\n                      index={index}\n                      ref={rowVirtualizer.measureElement}\n                      name={row.schedule}\n                      checked={checkedKeys.has(scheduleKey)}\n                      onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                      repoAddress={row.repoAddress}\n                    />\n                  </Row>\n                );\n              }\n\n              return (\n                <Row $height={size} $start={start} key={key}>\n                  <VirtualizedAutomationScheduleRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.schedule}\n                    checked={checkedKeys.has(scheduleKey)}\n                    onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                    repoAddress={row.repoAddress}\n                  />\n                </Row>\n              );\n            }\n\n            return <div key={key} />;\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {InstigationStatus} from '../graphql/types';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\n\nexport const filterPermissionedInstigationState = (\n  instigationState: BasicInstigationStateFragment,\n) => {\n  return (\n    (instigationState.hasStartPermission &&\n      instigationState.status === InstigationStatus.STOPPED) ||\n    (instigationState.hasStopPermission && instigationState.status === InstigationStatus.RUNNING)\n  );\n};\n","import memoize from 'lodash/memoize';\nimport {useCallback, useMemo} from 'react';\n\nimport {isKindTag} from '../../graph/KindTags';\nimport {DefinitionTag} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {StaticBaseConfig, useStaticSetFilter} from '../BaseFilters/useStaticSetFilter';\nimport {buildTagString} from '../tagAsString';\n\nconst emptyArray: any[] = [];\n\nexport type Tag = Omit<DefinitionTag, '__typename'>;\n\nexport const useDefinitionTagFilter = ({\n  allTags,\n  tags,\n  setTags,\n}: {\n  allTags: Tag[];\n  tags: null | Tag[];\n  setTags: null | ((s: Tag[]) => void);\n}) => {\n  const memoizedState = useMemo(() => tags?.map(buildDefinitionTag), [tags]);\n  return useStaticSetFilter<Tag>({\n    ...BaseConfig,\n    allValues: useMemo(\n      () =>\n        allTags.map((value) => ({\n          value,\n          match: [value.key + ':' + value.value],\n        })),\n      [allTags],\n    ),\n    menuWidth: '300px',\n    state: memoizedState ?? emptyArray,\n    onStateChanged: (values) => {\n      const nextTags = Array.from(values);\n      setTags?.(nextTags);\n    },\n    canSelectAll: false,\n  });\n};\n\nexport const useDefinitionTagFilterWithManagedState = ({allTags}: {allTags: Tag[]}) => {\n  const [tags, setTags] = useQueryPersistedState<Tag[]>({queryKey: 'tags'});\n\n  return useDefinitionTagFilter({\n    allTags,\n    tags,\n    setTags,\n  });\n};\n\nexport const buildDefinitionTag = memoize(\n  (tag: Tag) => {\n    return tag;\n  },\n  (tag) => [tag.key, tag.value].join('|@-@|'),\n);\n\nexport function useTagsForAssets(assets: {definition?: {tags?: Tag[] | null} | null}[]) {\n  return useTagsForObjects(\n    assets,\n    useCallback(\n      (asset: (typeof assets)[0]) => asset.definition?.tags?.filter((tag) => !isKindTag(tag)) ?? [],\n      [],\n    ),\n  );\n}\n\nexport function useTagsForObjects<T>(\n  objects: T[],\n  getTags: (obj: T) => Omit<DefinitionTag, '__typename'>[],\n) {\n  return useMemo(\n    () =>\n      Array.from(\n        new Set(\n          objects\n            .flatMap((a) => getTags(a).map((tag) => JSON.stringify(tag)) ?? [])\n            .filter((o) => o),\n        ),\n      )\n        .map((jsonTag) => buildDefinitionTag(JSON.parse(jsonTag)))\n        .sort((a, b) =>\n          // Sort by key then by value\n          a.key.localeCompare(b.key) === 0\n            ? a.value.localeCompare(b.value)\n            : a.key.localeCompare(b.key),\n        ),\n    [objects, getTags],\n  );\n}\n\nexport const BaseConfig: StaticBaseConfig<Tag> = {\n  name: 'Tag',\n  icon: 'tag',\n  renderLabel: ({value}) => {\n    return (\n      <TruncatedTextWithFullTextOnHover\n        text={buildTagString({key: value.key, value: value.value})}\n      />\n    );\n  },\n  getStringValue: ({value, key}) => `${key}: ${value}`,\n  matchType: 'all-of',\n};\n","import {InstigationStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useStaticSetFilter} from '../BaseFilters/useStaticSetFilter';\n\nexport const useInstigationStatusFilter = () => {\n  const [state, onStateChanged] = useQueryPersistedState<Set<InstigationStatus>>({\n    encode: (vals) => ({instigationStatus: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => {\n      const status = qs.instigationStatus;\n      if (typeof status === 'string') {\n        return new Set(status.split(',') as InstigationStatus[]);\n      }\n      return new Set();\n    },\n  });\n  return useStaticSetFilter<InstigationStatus>({\n    name: 'Running state',\n    icon: 'toggle_off',\n    allValues: [\n      {value: InstigationStatus.RUNNING, match: ['on', 'running']},\n      {value: InstigationStatus.STOPPED, match: ['off', 'stopped']},\n    ],\n    getKey: (value) => value,\n    renderLabel: ({value}) => (\n      <span>{value === InstigationStatus.RUNNING ? 'Running' : 'Stopped'}</span>\n    ),\n    state,\n    onStateChanged,\n    getStringValue: (value) => value,\n  });\n};\n","import {\n  Body2,\n  Box,\n  Colors,\n  Icon,\n  NonIdealState,\n  PageHeader,\n  SpinnerWithText,\n  Subtitle1,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useCallback, useContext, useMemo} from 'react';\n\nimport {AutomationBulkActionMenu} from './AutomationBulkActionMenu';\nimport {AutomationTabs} from './AutomationTabs';\nimport {AutomationsTable} from './AutomationsTable';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {makeAutomationKey} from '../sensors/makeSensorKey';\nimport {useFilters} from '../ui/BaseFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {doesFilterArrayMatchValueArray} from '../ui/Filters/doesFilterArrayMatchValueArray';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {\n  useDefinitionTagFilterWithManagedState,\n  useTagsForObjects,\n} from '../ui/Filters/useDefinitionTagFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nenum AutomationType {\n  Schedules = 'schedules',\n  Sensors = 'sensors',\n}\n\nconst AUTOMATION_TYPE_FILTERS = {\n  schedules: {\n    label: 'Schedules',\n    value: {type: 'schedules', label: 'Schedules'},\n    match: ['schedules'],\n  },\n  sensors: {\n    label: 'Sensors',\n    value: {type: 'sensors', label: 'Sensors'},\n    match: ['sensors'],\n  },\n};\n\nconst ALL_AUTOMATION_VALUES = Object.values(AUTOMATION_TYPE_FILTERS);\nconst AUTOMATION_TYPES: Set<string> = new Set(Object.values(AutomationType));\n\nexport const MergedAutomationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Automation');\n\n  const {\n    allRepos,\n    visibleRepos,\n    loadingNonAssets: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const [automationTypes, setAutomationTypes] = useQueryPersistedState<Set<AutomationType>>({\n    encode: (vals) => ({automationType: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => {\n      if (typeof qs.automationType === 'string') {\n        const values = qs.automationType.split(',');\n        return new Set(\n          values.filter((value) => AUTOMATION_TYPES.has(value)),\n        ) as Set<AutomationType>;\n      }\n      return new Set();\n    },\n  });\n\n  const automationFilterState = useMemo(() => {\n    return new Set(\n      Array.from(automationTypes).map(\n        (type) => AUTOMATION_TYPE_FILTERS[type as AutomationType].value,\n      ),\n    );\n  }, [automationTypes]);\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n  const automationTypeFilter = useStaticSetFilter({\n    name: 'Automation type',\n    allValues: ALL_AUTOMATION_VALUES,\n    icon: 'automation_condition',\n    getStringValue: (value) => value.label,\n    state: automationFilterState,\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setAutomationTypes(new Set(Array.from(state).map((value) => value.type as AutomationType)));\n    },\n  });\n\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(cachedEntries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, visibleRepos]);\n\n  const tagsFilter = useDefinitionTagFilterWithManagedState({\n    allTags: useTagsForObjects(\n      repoBuckets,\n      useCallback((repoBucket) => {\n        return [\n          ...repoBucket.schedules.flatMap((schedule) => schedule.tags),\n          ...repoBucket.sensors.flatMap((sensor) => sensor.tags),\n        ];\n      }, []),\n    ),\n  });\n  const {state: tagFilterState} = tagsFilter;\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, automationTypeFilter, tagsFilter],\n    [codeLocationFilter, runningStateFilter, automationTypeFilter, tagsFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, schedules, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState, tags}) => {\n          if (\n            tagFilterState.size &&\n            !doesFilterArrayMatchValueArray(Array.from(tagFilterState), tags)\n          ) {\n            return false;\n          }\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (automationTypes.size && !automationTypes.has(AutomationType.Sensors)) {\n            return false;\n          }\n          return true;\n        }),\n        schedules: schedules.filter(({scheduleState, tags}) => {\n          if (\n            tagFilterState.size &&\n            !doesFilterArrayMatchValueArray(Array.from(tagFilterState), tags)\n          ) {\n            return false;\n          }\n          if (runningState.size && !runningState.has(scheduleState.status)) {\n            return false;\n          }\n          if (automationTypes.size && !automationTypes.has(AutomationType.Schedules)) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, tagFilterState, runningState, automationTypes]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules, sensors}) => ({\n        repoAddress,\n        schedules: schedules\n          .filter(({name}) => name.toLocaleLowerCase().includes(searchToLower))\n          .map(({name}) => name),\n        sensors: sensors\n          .filter(({name}) => name.toLocaleLowerCase().includes(searchToLower))\n          .map(({name}) => name),\n      }))\n      .filter(({sensors, schedules}) => sensors.length > 0 || schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  // Collect all automations across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedAutomations = useMemo(() => {\n    return filteredBuckets\n      .map(({repoAddress, schedules, sensors}) => {\n        return [\n          ...sensors\n            .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n            .map(({name, sensorState}) => ({\n              repoAddress,\n              name,\n              type: 'sensor' as const,\n              instigationState: sensorState,\n            })),\n          ...schedules\n            .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n            .map(({name, scheduleState}) => ({\n              repoAddress,\n              name,\n              type: 'schedule' as const,\n              instigationState: scheduleState,\n            })),\n        ];\n      })\n      .flat();\n  }, [filteredBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedAutomationKeys = useMemo(() => {\n    return allPermissionedAutomations.map(({repoAddress, name}) =>\n      makeAutomationKey(repoAddress, name),\n    );\n  }, [allPermissionedAutomations]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedAutomationKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules, sensors}) => {\n          return [...schedules, ...sensors].map((name) => makeAutomationKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedAutomationKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedAutomationKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedAutomations = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedAutomations.filter(({repoAddress, name}) => {\n      return checkedKeysOnScreen.has(makeAutomationKey(repoAddress, name));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedAutomations, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedAutomationKeys.length > 0;\n  const checkedCount = checkedAutomations.length;\n  const anyAutomationsVisible = permissionedKeysOnScreen.length > 0;\n\n  const content = () => {\n    if (workspaceLoading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} padding={{top: 64}}>\n          <SpinnerWithText label=\"Loading automations…\" />\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching automations\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No automations matching <strong>{searchValue}</strong> were found in the\n                    selected code locations\n                  </div>\n                ) : (\n                  <div>\n                    No automations matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No automations\"\n            description={\n              anyReposHidden ? (\n                'No automations were found in the selected code locations'\n              ) : (\n                <Body2>\n                  There are no automations in this deployment.{' '}\n                  <a\n                    href=\"https://docs.dagster.io/concepts/automation\"\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n                      Learn more about automations\n                      <Icon name=\"open_in_new\" color={Colors.linkDefault()} />\n                    </Box>\n                  </a>\n                </Body2>\n              )\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <AutomationsTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Subtitle1>Automation</Subtitle1>} />\n      {automaterializeSensorsFlagState === 'has-global-amp' ? (\n        <Box padding={{horizontal: 24}} border=\"bottom\">\n          <AutomationTabs tab=\"schedules-and-sensors\" />\n        </Box>\n      ) : null}\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anyAutomationsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <AutomationBulkActionMenu automations={checkedAutomations} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {content()}\n    </Box>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default MergedAutomationRoot;\n\nconst buildBuckets = (\n  locationEntries: Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n) => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0 || schedules.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverContent\":\"LatestTickHoverButton_hoverContent__4QRVM\"};","import {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\n\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props {\n  tab: 'schedules-and-sensors' | 'global-amp';\n}\n\nexport const AutomationTabs = (props: Props) => {\n  const {tab} = props;\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n\n  return (\n    <Tabs selectedTabId={tab}>\n      <TabLink id=\"schedules-and-sensors\" title=\"Schedules and sensors\" to=\"/automation\" />\n      {automaterializeSensorsFlagState === 'has-global-amp' ? (\n        <TabLink\n          id=\"global-amp\"\n          title={\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <div>Auto-materialize</div>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <div\n                  style={{\n                    width: '10px',\n                    height: '10px',\n                    borderRadius: '50%',\n                    backgroundColor:\n                      automaterialize.paused === false ? Colors.accentBlue() : Colors.accentGray(),\n                  }}\n                />\n              )}\n            </Box>\n          }\n          to=\"/overview/automation\"\n        />\n      ) : null}\n    </Tabs>\n  );\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n"],"names":["useCodeLocationFilter","codeLocations","setCodeLocations","undefined","allRepos","visibleRepos","setVisible","setHidden","useContext","WorkspaceContext","allRepoAddresses","useMemo","map","buildRepoAddress","repo","repository","name","repositoryLocation","visibleRepoAddresses","length","setVisibleRepos","useCallback","state","size","filter","has","repoAddress","Array","from","useStaticSetFilter","allValues","value","match","repoAddressAsHumanString","onStateChanged","menuWidth","BaseConfig","icon","renderLabel","TruncatedTextWithFullTextOnHover","text","getStringValue","getKey","initialState","step","completion","completed","errors","reducer","prevState","action","type","error","useInstigationStateReducer","useReducer","AutomationStateChangeDialog","openWithIntent","onClose","automations","props","count","dispatch","useEffect","startSensor","useMutation","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","startSchedule","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","start","automation","repoValues","repositoryLocationName","location","repositoryName","data","variables","sensorSelector","sensorName","__typename","message","scheduleSelector","scheduleName","assertUnreachable","stop","instigationState","id","stopRunningSchedule","mutate","canQuicklyClose","Dialog","isOpen","title","canEscapeKeyClose","canOutsideClickClose","DialogBody","Group","direction","spacing","progressContent","div","ProgressBar","intent","Math","max","animate","NavigationBlock","completionContent","errorCount","Object","keys","successCount","alignItems","Icon","color","Colors","ul","style","margin","li","strong","automationName","DialogFooter","buttons","Button","onClick","label","disabled","instigationStateSummary","anyOff","anyOn","instigationStates","status","InstigationStatus","RUNNING","STOPPED","setOpenWithIntent","useState","Popover","content","Menu","MenuItem","aria-disabled","placement","rightIcon","LatestTickHoverButton","tick","showErrors","setShowErrors","Box","padding","vertical","horizontal","Caption","statusToIcon","timestamp","Timestamp","unix","InstigationTickStatus","FAILURE","HoverContent","ButtonLink","SUCCESS","runCount","runIds","numberFormatter","format","STARTED","SKIPPED","skipReason","interactionKind","HoverButton","width","PythonErrorInfo","topBorder","Spinner","purpose","className","styles","border","bottom","flex","gap","justifyContent","hourOffsetFromUTC","formatForTimezone","offset","Intl","DateTimeFormat","navigator","language","timeZone","timeZoneName","formatToParts","Date","find","part","withoutGMT","replace","hours","minutes","split","parsedHours","parseInt","parsedMinutes","CronTag","cronSchedule","executionTimezone","withHumanTimezone","withExecutionTimezone","useCronInformation","tooltipContent","MetadataTable","rows","key","CaptionMono","span","Container","Tooltip","Tag","timezone","storedTimezone","TimeContext","longTimezoneName","humanStringWithExecutionTimezone","humanCronString","userTimezone","browserTimezone","userTimezoneOffset","executionTimezoneOffset","tzOffset","styled","errorDisplay","runningScheduleCount","push","popoverClassName","position","index","fill","interactive","TEMPLATE_COLUMNS","TEMPLATE_COLUMNS_WITH_CHECKBOX","$showCheckboxColumn","SINGLE_SCHEDULE_QUERY","gql","TICK_TAG_FRAGMENT","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","forwardRef","ref","scheduleData","checked","onToggleChecked","shouldQuery","useDelayedState","queryResult","useQuery","selector","skip","notifyOnNetworkStatusChange","scheduleAssetSelectionQueryResult","SCHEDULE_ASSET_SELECTIONS_QUERY","useQueryRefreshAtInterval","FIFTEEN_SECONDS","scheduleOrError","scheduleState","ListItem","href","workspacePathFromAddress","onToggle","renderLink","Link","to","left","description","Skeleton","$width","$height","right","latestRuns","loading","runs","HorizontalControls","controls","control","startTime","RunStatusOverlay","run","hoverOpenDelay","RunStatusIndicator","TimeFromNow","unixTimestamp","showTooltip","ScheduleSwitch","schedule","Checkbox","indeterminate","displayName","SENSOR_TYPE_META","SensorType","ASSET","AUTO_MATERIALIZE","AUTOMATION","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","UNKNOWN","SENSOR_SWITCH_FRAGMENT","sensorQueryResult","SINGLE_SENSOR_QUERY","sensorAssetSelectionQueryResult","SENSOR_ASSET_SELECTIONS_QUERY","sensorData","sensorOrError","sensorState","ticks","sensorType","sensorInfo","SensorSwitch","sensor","ObserveAutomationSensorRow","sensorTypeToLabel","checkbox","HeaderRow","templateColumns","sticky","HeaderCell","top","VirtualizedAutomationScheduleRow","hasStartPermission","hasStopPermission","targets","pipelineName","assetSelection","data-index","AutomationRowGrid","RowCell","canShow","checkboxState","onChange","e","target","HTMLInputElement","shiftKey","nativeEvent","MouseEvent","getModifierState","grow","runningCount","MiddleTruncate","nextTick","overflow","whiteSpace","maxWidth","textOverflow","TimestampDisplay","timeFormat","showSeconds","showTimezone","LoadingOrNone","AutomationTargetList","automationType","TickStatusTag","tickResultType","LastRunSummary","showButton","showHover","showSummary","selectedAssets","makeAutomationKey","AutomationsTable","repos","headerCheckbox","checkedKeys","onToggleCheckFactory","flagUseNewObserveUIs","useFeatureFlags","parentRef","React","allKeys","expandedKeys","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","schedules","sensors","scheduleCount","sensorCount","repoKey","includes","sensorKeys","Set","scheduleKeys","sort","a","b","COMMON_COLLATOR","compare","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","row","ii","overscan","totalHeight","getTotalSize","items","getVirtualItems","VirtualizedAutomationHeader","Inner","$totalHeight","Row","$start","DynamicRepoRow","measureElement","expanded","showLocation","rightElement","sensorKey","VirtualizedAutomationSensorRow","scheduleKey","ObserveAutomationScheduleRow","filterPermissionedInstigationState","emptyArray","useDefinitionTagFilter","allTags","tags","setTags","memoizedState","buildDefinitionTag","values","nextTags","canSelectAll","useQueryPersistedState","queryKey","memoize","tag","join","buildTagString","matchType","encode","instigationStatus","vals","decode","qs","AutomationType","AUTOMATION_TYPE_FILTERS","ALL_AUTOMATION_VALUES","AUTOMATION_TYPES","MergedAutomationRoot","useTrackPageView","useDocumentTitle","loadingNonAssets","workspaceLoading","cachedData","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","searchValue","setSearchValue","defaults","search","automationTypes","setAutomationTypes","automationFilterState","codeLocationFilter","runningStateFilter","useInstigationStatusFilter","automationTypeFilter","repoBuckets","cachedEntries","visibleKeys","visibleRepoKeys","buildBuckets","tagsFilter","useDefinitionTagFilterWithManagedState","useTagsForObjects","getTags","objects","flatMap","JSON","stringify","o","parse","jsonTag","localeCompare","repoBucket","tagFilterState","filters","button","filterButton","activeFiltersJsx","useFilters","runningState","filteredBuckets","rest","doesFilterArrayMatchValueArray","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","allPermissionedAutomations","allPermissionedAutomationKeys","checkedIds","onToggleFactory","useSelectionReducer","permissionedKeysOnScreen","filteredKeys","checkedAutomations","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","anyAutomationsVisible","height","PageHeader","Subtitle1","AutomationTabs","tab","TextInput","placeholder","useDisabledButtonTooltipFix","AutomationBulkActionMenu","SpinnerWithText","anyReposHidden","CheckAllBox","totalCount","NonIdealState","Body2","rel","entries","locationEntries","entry","locationOrLoadError","buckets","repositories","sortRepoBuckets","aString","bString","automaterialize","useAutomaterializeDaemonStatus","Tabs","selectedTabId","TabLink","borderRadius","backgroundColor","paused","option"],"sourceRoot":"","ignoreList":[]}